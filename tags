!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	Development	//
-output	./Makefile	/^	-@df --output=ipcent \/ |tail -n1|grep - && $(SUDC)pkill postdrop;:$/;"	m
ACB_AUTHENTICATE	./appobject.h	/^	ACB_AUTHENTICATE,$/;"	e	enum:__anon3
ACB_CONNECTION_ESTABLISHED	./appobject.h	/^	ACB_CONNECTION_ESTABLISHED,$/;"	e	enum:__anon3
ACB_CONNECTION_NOTIFY	./appobject.h	/^	ACB_CONNECTION_NOTIFY,$/;"	e	enum:__anon3
ACB_CONNECTION_STATUS	./appobject.h	/^	ACB_CONNECTION_STATUS,$/;"	e	enum:__anon3
ACB_CONNECTION_TERMINATED	./appobject.h	/^	ACB_CONNECTION_TERMINATED,$/;"	e	enum:__anon3
ACB_CONTACTS_CHANGED	./appobject.h	/^	ACB_CONTACTS_CHANGED,$/;"	e	enum:__anon3
ACB_CONTACT_PROCESS	./appobject.h	/^	ACB_CONTACT_PROCESS,$/;"	e	enum:__anon3
ACB_FAX_PROCESS	./appobject.h	/^	ACB_FAX_PROCESS,$/;"	e	enum:__anon3
ACB_JOURNAL_LOADED	./appobject.h	/^	ACB_JOURNAL_LOADED,$/;"	e	enum:__anon3
ACB_MAX	./appobject.h	/^	ACB_MAX$/;"	e	enum:__anon3
ACB_MESSAGE	./appobject.h	/^	ACB_MESSAGE,$/;"	e	enum:__anon3
APP_OBJECT	./appobject.h	48;"	d
APP_OBJECT_CLASS	./appobject.h	49;"	d
APP_OBJECT_TYPE	./appobject.h	47;"	d
AUDIO_INPUT	./audio.h	28;"	d
AUDIO_OUTPUT	./audio.h	27;"	d
Abschn_auswert	./kons.cpp	/^void confdcl::Abschn_auswert(int obverb\/*=0*\/, const char tz\/*='='*\/)$/;"	f	class:confdcl
AppCallbackId	./appobject.h	/^} AppCallbackId;$/;"	t	typeref:enum:__anon3
AppObject	./appobject.h	/^typedef struct _AppObject AppObject;$/;"	t	typeref:struct:_AppObject
AppObjectClass	./appobject.h	/^typedef struct _AppObjectClass AppObjectClass;$/;"	t	typeref:struct:_AppObjectClass
AppObjectPrivate	./appobject.c	/^typedef struct _AppObjectPrivate AppObjectPrivate;$/;"	t	typeref:struct:_AppObjectPrivate	file:
B_Alle	./kons.h	127;"	d
B_Block	./kons.h	123;"	d
B_Chdev	./kons.h	122;"	d
B_Datei	./kons.h	120;"	d
B_FIFO	./kons.h	124;"	d
B_Link	./kons.h	125;"	d
B_Sock	./kons.h	126;"	d
B_Verzn	./kons.h	121;"	d
CALL_TYPE_ALL	./call.h	/^	CALL_TYPE_ALL,$/;"	e	enum:__anon4
CALL_TYPE_BLOCKED	./call.h	/^	CALL_TYPE_BLOCKED$/;"	e	enum:__anon4
CALL_TYPE_FAX	./call.h	/^	CALL_TYPE_FAX,$/;"	e	enum:__anon4
CALL_TYPE_FAX_REPORT	./call.h	/^	CALL_TYPE_FAX_REPORT,$/;"	e	enum:__anon4
CALL_TYPE_INCOMING	./call.h	/^	CALL_TYPE_INCOMING,$/;"	e	enum:__anon4
CALL_TYPE_MISSED	./call.h	/^	CALL_TYPE_MISSED,$/;"	e	enum:__anon4
CALL_TYPE_OUTGOING	./call.h	/^	CALL_TYPE_OUTGOING,$/;"	e	enum:__anon4
CALL_TYPE_RECORD	./call.h	/^	CALL_TYPE_RECORD,$/;"	e	enum:__anon4
CALL_TYPE_VOICE	./call.h	/^	CALL_TYPE_VOICE,$/;"	e	enum:__anon4
CAPI_BCHANNELS	./faxophone.h	65;"	d
CAPI_BUFFERCNT	./faxophone.h	63;"	d
CAPI_CONNECTIONS	./faxophone.h	59;"	d
CAPI_PACKETS	./faxophone.h	61;"	d
CONNECT	./fax.h	/^	CONNECT = 1,$/;"	e	enum:fax_phase
CONNECTION_TYPE_CONNECT	./connection.h	29;"	d
CONNECTION_TYPE_DISCONNECT	./connection.h	30;"	d
CONNECTION_TYPE_INCOMING	./connection.h	27;"	d
CONNECTION_TYPE_MISSED	./connection.h	31;"	d
CONNECTION_TYPE_OUTGOING	./connection.h	28;"	d
CREATE_THREAD	./faxophone.h	77;"	d
CREATE_THREAD	./faxophone.h	78;"	d
DEBUG	./Makefile	/^debug debugnew debugneu: DEBUG=-g $/;"	m
DEPFLAGS	./Makefile	/^DEPFLAGS = -MT $@ -MMD -MP -MF $(DEPDIR)\/$*.Td -DGLIB_COMPILATION$/;"	m
DIRFEHLER	./kons.h	/^  DIRFEHLER=998, $/;"	e	enum:__anon2
DPROG	./fbfax.h	1;"	d
DPROG	./kons.h	/^		const char* const DPROG;$/;"	m	struct:hcl
DPROG_T	./fbfax.cpp	/^char const *DPROG_T[T_MAX+1][SprachZahl]=$/;"	v
Debian	./kons.h	/^enum distroenum{unbek=-1,Mint,Ubuntu,Debian,Suse,Fedora,Fedoraalt,Mageia,Manjaro};$/;"	e	enum:distroenum
EMPTY_STRING	./direkt.h	3;"	d
EMPTY_STRING	./gstring.h	26;"	d
ENABLE_NLS	./config.h	5;"	d
FAXOPHONE_H	./faxophone.h	26;"	d
FAXOPHONE_PHONE_H	./phone.h	26;"	d
FAX_CIP	./fax.h	33;"	d
FAX_H	./fax.h	26;"	d
FB	./tr64.h	/^		string FB;$/;"	m	class:tr64cl
FERTIG	./Makefile	/^FERTIG=$(error transfer finished\/ Fertig mit Transfer!)$/;"	m
Fedora	./kons.h	/^enum distroenum{unbek=-1,Mint,Ubuntu,Debian,Suse,Fedora,Fedoraalt,Mageia,Manjaro};$/;"	e	enum:distroenum
Fedoraalt	./kons.h	/^enum distroenum{unbek=-1,Mint,Ubuntu,Debian,Suse,Fedora,Fedoraalt,Mageia,Manjaro};$/;"	e	enum:distroenum
Fol_Dat	./kons.h	128;"	d
Fol_Mus	./kons.h	130;"	d
Fol_Ver	./kons.h	129;"	d
GDK_VERSION_MAX_ALLOWED	./config.h	8;"	d
GDK_VERSION_MIN_REQUIRED	./config.h	11;"	d
GETTEXT_PACKAGE	./config.h	14;"	d
HAVE_BIND_TEXTDOMAIN_CODESET	./config.h	20;"	d
HAVE_CAPI_36	./config.h	23;"	d
HAVE_DCGETTEXT	./config.h	34;"	d
HAVE_DLFCN_H	./config.h	37;"	d
HAVE_FAXOPHONE	./config.h	40;"	d
HAVE_GETTEXT	./config.h	43;"	d
HAVE_GNOTIFICATION	./config.h	46;"	d
HAVE_GSTREAMER1	./config.h	49;"	d
HAVE_INTTYPES_H	./config.h	52;"	d
HAVE_LC_MESSAGES	./config.h	61;"	d
HAVE_LIBGTHREAD_2_0	./config.h	64;"	d
HAVE_LIBM	./config.h	67;"	d
HAVE_LIBNOTIFY	./config.h	70;"	d
HAVE_LIBTIFF	./config.h	73;"	d
HAVE_LOCALE_H	./config.h	76;"	d
HAVE_MEMORY_H	./config.h	79;"	d
HAVE_SIGACTION	./config.h	88;"	d
HAVE_STDINT_H	./config.h	94;"	d
HAVE_STDLIB_H	./config.h	97;"	d
HAVE_STRINGS_H	./config.h	100;"	d
HAVE_STRING_H	./config.h	103;"	d
HAVE_SYS_STAT_H	./config.h	106;"	d
HAVE_SYS_TYPES_H	./config.h	109;"	d
HAVE_SYS_UTSNAME_H	./config.h	112;"	d
HAVE_TIFFIO_H	./config.h	115;"	d
HAVE_UNISTD_H	./config.h	118;"	d
IDLE	./fax.h	/^	IDLE = -1,$/;"	e	enum:fax_phase
ISDN_CONVERT_H	./isdn-convert.h	26;"	d
IS_APP_OBJECT	./appobject.h	50;"	d
IS_APP_OBJECT_CLASS	./appobject.h	51;"	d
LIBROUTERMANAGER_APPOBJECT_EMIT_H	./appobject-emit.h	21;"	d
LIBROUTERMANAGER_APPOBJECT_H	./appobject.h	21;"	d
LIBROUTERMANAGER_AUDIO_H	./audio.h	21;"	d
LIBROUTERMANAGER_CALL_H	./call.h	21;"	d
LIBROUTERMANAGER_CONNECTION_H	./connection.h	21;"	d
LIBROUTERMANAGER_CONTACT_H	./contact.h	21;"	d
LIBROUTERMANAGER_FAX_PHONE_H	./fax_phone.h	21;"	d
LIBROUTERMANAGER_FILE_H	./file.h	21;"	d
LIBROUTERMANAGER_GSTRING_H	./gstring.h	21;"	d
LIBROUTERMANAGER_LOGGING_H	./logging.h	21;"	d
LIBROUTERMANAGER_NETWORK_H	./network.h	21;"	d
LIBROUTERMANAGER_NET_MONITOR_H	./net_monitor.h	21;"	d
LIBROUTERMANAGER_ROUTERMANAGER_H	./routermanager.h	21;"	d
LT_OBJDIR	./config.h	121;"	d
Mageia	./kons.h	/^enum distroenum{unbek=-1,Mint,Ubuntu,Debian,Suse,Fedora,Fedoraalt,Mageia,Manjaro};$/;"	e	enum:distroenum
Manjaro	./kons.h	/^enum distroenum{unbek=-1,Mint,Ubuntu,Debian,Suse,Fedora,Fedoraalt,Mageia,Manjaro};$/;"	e	enum:distroenum
Mint	./kons.h	/^enum distroenum{unbek=-1,Mint,Ubuntu,Debian,Suse,Fedora,Fedoraalt,Mageia,Manjaro};$/;"	e	enum:distroenum
NUMBER_FORMAT_INTERNATIONAL	./call.h	/^	NUMBER_FORMAT_INTERNATIONAL,$/;"	e	enum:number_format
NUMBER_FORMAT_INTERNATIONAL_PLUS	./call.h	/^	NUMBER_FORMAT_INTERNATIONAL_PLUS$/;"	e	enum:number_format
NUMBER_FORMAT_LOCAL	./call.h	/^	NUMBER_FORMAT_LOCAL,$/;"	e	enum:number_format
NUMBER_FORMAT_NATIONAL	./call.h	/^	NUMBER_FORMAT_NATIONAL,$/;"	e	enum:number_format
NUMBER_FORMAT_UNKNOWN	./call.h	/^	NUMBER_FORMAT_UNKNOWN,$/;"	e	enum:number_format
PACKAGE	./config.h	124;"	d
PACKAGE_BUGREPORT	./config.h	127;"	d
PACKAGE_NAME	./config.h	130;"	d
PACKAGE_STRING	./config.h	133;"	d
PACKAGE_TARNAME	./config.h	136;"	d
PACKAGE_URL	./config.h	139;"	d
PACKAGE_VERSION	./config.h	142;"	d
PATH_MAX	./kons.h	55;"	d
PATH_MAX	./kons.h	59;"	d
PHASE_B	./fax.h	/^	PHASE_B = 2,$/;"	e	enum:fax_phase
PHASE_D	./fax.h	/^	PHASE_D = 3,$/;"	e	enum:fax_phase
PHASE_E	./fax.h	/^	PHASE_E = 4,$/;"	e	enum:fax_phase
PHONE_CIP	./phone.h	28;"	d
REALPATHFEHLER	./kons.h	/^  REALPATHFEHLER=999$/;"	e	enum:__anon2
RECORDING_BUFSIZE	./faxophone.h	103;"	d
RECORDING_JITTER	./faxophone.h	104;"	d
RECORDING_LOCAL	./faxophone.h	/^	RECORDING_LOCAL,$/;"	e	enum:recording
RECORDING_REMOTE	./faxophone.h	/^	RECORDING_REMOTE$/;"	e	enum:recording
REGFEHLER	./kons.h	/^  REGFEHLER=997,$/;"	e	enum:__anon2
RM_ERROR	./fax_phone.c	51;"	d	file:
RM_ERROR	./routermanager.h	40;"	d
RM_ERROR_AUDIO	./routermanager.h	/^	RM_ERROR_AUDIO,$/;"	e	enum:__anon1
RM_ERROR_FAX	./routermanager.h	/^	RM_ERROR_FAX,$/;"	e	enum:__anon1
RM_ERROR_ROUTER	./routermanager.h	/^	RM_ERROR_ROUTER,$/;"	e	enum:__anon1
ROUTERMANAGER_PATH	./routermanager.h	38;"	d
ROUTERMANAGER_SCHEME	./routermanager.h	34;"	d
ROUTERMANAGER_SCHEME_PROFILE	./routermanager.h	35;"	d
ROUTERMANAGER_SCHEME_PROFILE_ACTION	./routermanager.h	36;"	d
SESSION_FAX	./faxophone.h	/^	SESSION_FAX,$/;"	e	enum:session_type
SESSION_NONE	./faxophone.h	/^	SESSION_NONE,$/;"	e	enum:session_type
SESSION_PHONE	./faxophone.h	/^	SESSION_PHONE,$/;"	e	enum:session_type
SESSION_SFF	./faxophone.h	/^	SESSION_SFF$/;"	e	enum:session_type
SIZEOF_LONG	./config.h	145;"	d
SPANDSP_EXPOSE_INTERNAL_STRUCTURES	./fax.c	27;"	d	file:
SPANDSP_EXPOSE_INTERNAL_STRUCTURES	./fax.h	28;"	d
SPEECH_CIP	./fax.h	32;"	d
STATE_CONNECTED	./faxophone.h	/^	STATE_CONNECTED,$/;"	e	enum:state
STATE_CONNECT_ACTIVE	./faxophone.h	/^	STATE_CONNECT_ACTIVE,$/;"	e	enum:state
STATE_CONNECT_B3_WAIT	./faxophone.h	/^	STATE_CONNECT_B3_WAIT,$/;"	e	enum:state
STATE_CONNECT_REQ	./faxophone.h	/^	STATE_CONNECT_REQ,$/;"	e	enum:state
STATE_CONNECT_WAIT	./faxophone.h	/^	STATE_CONNECT_WAIT,$/;"	e	enum:state
STATE_DISCONNECT_ACTIVE	./faxophone.h	/^	STATE_DISCONNECT_ACTIVE,$/;"	e	enum:state
STATE_DISCONNECT_B3_REQ	./faxophone.h	/^	STATE_DISCONNECT_B3_REQ,$/;"	e	enum:state
STATE_DISCONNECT_B3_WAIT	./faxophone.h	/^	STATE_DISCONNECT_B3_WAIT,$/;"	e	enum:state
STATE_DISCONNET_WAIT	./faxophone.h	/^	STATE_DISCONNET_WAIT,$/;"	e	enum:state
STATE_IDLE	./faxophone.h	/^	STATE_IDLE = 0,$/;"	e	enum:state
STATE_INCOMING_WAIT	./faxophone.h	/^	STATE_INCOMING_WAIT,$/;"	e	enum:state
STATE_MAXSTATE	./faxophone.h	/^	STATE_MAXSTATE$/;"	e	enum:state
STATE_RINGING	./faxophone.h	/^	STATE_RINGING,$/;"	e	enum:state
STDC_HEADERS	./config.h	148;"	d
Schschreib	./kons.cpp	/^int Schschreib(const char *fname, Schluessel *conf, size_t csize)$/;"	f
SprachZahl	./kons.h	/^enum Sprache {deutsch,englisch,SprachZahl};$/;"	e	enum:Sprache
Sprache	./kons.h	/^enum Sprache {deutsch,englisch,SprachZahl};$/;"	g
Suse	./kons.h	/^enum distroenum{unbek=-1,Mint,Ubuntu,Debian,Suse,Fedora,Fedoraalt,Mageia,Manjaro};$/;"	e	enum:distroenum
TCp	./kons.h	/^  const char * const * const * const *TCp;$/;"	m	struct:TxB
TCtp	./kons.h	/^typedef const char * const * const TCtp[SprachZahl];$/;"	t
T_	./fbfax.h	/^enum T_      $/;"	g
T_Aktiviere_Dienst	./kons.h	/^  T_Aktiviere_Dienst,$/;"	e	enum:Tkons_
T_Alle_wieviel_Minuten_soll	./kons.h	/^	T_Alle_wieviel_Minuten_soll,$/;"	e	enum:Tkons_
T_Aufrufintervall	./kons.h	/^	T_Aufrufintervall,$/;"	e	enum:Tkons_
T_Ausgabezeile	./kons.h	/^	T_Ausgabezeile,$/;"	e	enum:Tkons_
T_Benutzer	./kons.h	/^	T_Benutzer,$/;"	e	enum:Tkons_
T_Benutzer_fuer_Fritzbox	./fbfax.h	/^	T_Benutzer_fuer_Fritzbox,$/;"	e	enum:T_
T_Bildschirmausgabe_ganz_stumm	./kons.h	/^  T_Bildschirmausgabe_ganz_stumm,$/;"	e	enum:Tkons_
T_Bildschirmausgabe_gespraechiger	./kons.h	/^	T_Bildschirmausgabe_gespraechiger,$/;"	e	enum:Tkons_
T_Bitte_mit	./kons.h	/^  T_Bitte_mit,$/;"	e	enum:Tkons_
T_Cron_Aufruf_von	./fbfax.h	/^	T_Cron_Aufruf_von,$/;"	e	enum:T_
T_DPROG_anhalten	./fbfax.h	/^	T_DPROG_anhalten,$/;"	e	enum:T_
T_Datei	./kons.h	/^	T_Datei,$/;"	e	enum:Tkons_
T_Dateien_warten_in_pfad_anstatt	./fbfax.h	/^	T_Dateien_warten_in_pfad_anstatt,$/;"	e	enum:T_
T_Datenbank_nicht_initialisierbar_breche_ab	./fbfax.h	/^	T_Datenbank_nicht_initialisierbar_breche_ab,$/;"	e	enum:T_
T_Datum_nicht_gesetzt_bei	./kons.h	/^  T_Datum_nicht_gesetzt_bei,$/;"	e	enum:Tkons_
T_Dauer	./kons.h	/^  T_Dauer,$/;"	e	enum:Tkons_
T_Dienst	./kons.h	/^  T_Dienst,$/;"	e	enum:Tkons_
T_Dienst_disabled	./kons.h	/^	T_Dienst_disabled,$/;"	e	enum:Tkons_
T_Dienst_inexistent	./kons.h	/^	T_Dienst_inexistent,$/;"	e	enum:Tkons_
T_Dienst_kann_gestartet_werden	./kons.h	/^	T_Dienst_kann_gestartet_werden,$/;"	e	enum:Tkons_
T_Dienst_laeuft	./kons.h	/^	T_Dienst_laeuft,$/;"	e	enum:Tkons_
T_Dienst_laeuft_noch_aber_Dienstdatei_inexistent	./kons.h	/^	T_Dienst_laeuft_noch_aber_Dienstdatei_inexistent,$/;"	e	enum:Tkons_
T_Dienstdateiname_nicht_ermittelbar	./kons.h	/^	T_Dienstdateiname_nicht_ermittelbar,$/;"	e	enum:Tkons_
T_Ende	./kons.h	/^	T_Ende,$/;"	e	enum:Tkons_
T_Erfolg	./kons.h	/^  T_Erfolg,$/;"	e	enum:Tkons_
T_Erg	./kons.h	/^	T_Erg,$/;"	e	enum:Tkons_
T_Ergebnis	./kons.h	/^	T_Ergebnis,$/;"	e	enum:Tkons_
T_Ergebnis_Dienst	./kons.h	/^	T_Ergebnis_Dienst,$/;"	e	enum:Tkons_
T_Ergebnis_nach_make	./kons.h	/^	T_Ergebnis_nach_make,$/;"	e	enum:Tkons_
T_Ergebnis_nach_make_install	./kons.h	/^	T_Ergebnis_nach_make_install,$/;"	e	enum:Tkons_
T_Erklaerung_aller_Optionen	./kons.h	/^	T_Erklaerung_aller_Optionen,$/;"	e	enum:Tkons_
T_Erklaerung_haeufiger_Optionen	./kons.h	/^	T_Erklaerung_haeufiger_Optionen,$/;"	e	enum:Tkons_
T_Exec_Datei_fehlt	./kons.h	/^	T_Exec_Datei_fehlt,$/;"	e	enum:Tkons_
T_Exec_Dateiname_nicht_ermittelbar	./kons.h	/^	T_Exec_Dateiname_nicht_ermittelbar,$/;"	e	enum:Tkons_
T_Exitcode	./kons.h	/^	T_Exitcode,$/;"	e	enum:Tkons_
T_Fehlender	./kons.h	/^  T_Fehlender,$/;"	e	enum:Tkons_
T_Fehlender_Parameter_Datum_zu	./kons.h	/^	T_Fehlender_Parameter_Datum_zu,$/;"	e	enum:Tkons_
T_Fehlender_Parameter_string_zu	./kons.h	/^  T_Fehlender_Parameter_string_zu,$/;"	e	enum:Tkons_
T_Fehler	./kons.h	/^  T_Fehler,$/;"	e	enum:Tkons_
T_Fehler_Parameter	./kons.h	/^  T_Fehler_Parameter,$/;"	e	enum:Tkons_
T_Fehler_bei_auswert	./kons.h	/^  T_Fehler_bei_auswert,$/;"	e	enum:Tkons_
T_Fehler_bei_lstat	./kons.h	/^  T_Fehler_bei_lstat,$/;"	e	enum:Tkons_
T_Fehler_beim_Deferenzieren_von	./kons.h	/^	T_Fehler_beim_Deferenzieren_von,$/;"	e	enum:Tkons_
T_Fehler_beim_Loeschen	./kons.h	/^  T_Fehler_beim_Loeschen,$/;"	e	enum:Tkons_
T_Fehler_beim_Pruefen_von	./fbfax.h	/^	T_Fehler_beim_Pruefen_von,$/;"	e	enum:T_
T_Fehler_in_find2cl	./kons.h	/^	T_Fehler_in_find2cl,$/;"	e	enum:Tkons_
T_Fehler_in_setfaclggf	./kons.h	/^	T_Fehler_in_setfaclggf,$/;"	e	enum:Tkons_
T_Fertig_mit	./kons.h	/^	T_Fertig_mit,$/;"	e	enum:Tkons_
T_Fertig_mit_Parsen_der_Befehlszeile	./kons.h	/^	T_Fertig_mit_Parsen_der_Befehlszeile,$/;"	e	enum:Tkons_
T_Fertige_Faxe_werden_hier_gesammelt_anstatt_in	./fbfax.h	/^	T_Fertige_Faxe_werden_hier_gesammelt_anstatt_in,$/;"	e	enum:T_
T_Firewallport	./kons.h	/^	T_Firewallport,$/;"	e	enum:Tkons_
T_Folge	./kons.h	/^	T_Folge,$/;"	e	enum:Tkons_
T_Frage_ab	./kons.h	/^	T_Frage_ab,$/;"	e	enum:Tkons_
T_Freie_Software	./kons.h	/^	T_Freie_Software,$/;"	e	enum:Tkons_
T_Fuege_ein	./fbfax.h	/^	T_Fuege_ein, \/\/ω$/;"	e	enum:T_
T_Fuehre_aus	./kons.h	/^  T_Fuehre_aus,$/;"	e	enum:Tkons_
T_Fuehrte_aus	./kons.h	/^  T_Fuehrte_aus,$/;"	e	enum:Tkons_
T_Gabelung_zu_dmain_misslungen	./fbfax.h	/^	T_Gabelung_zu_dmain_misslungen,$/;"	e	enum:T_
T_Gebrauch	./kons.h	/^	T_Gebrauch,$/;"	e	enum:Tkons_
T_Gescheiterte_Faxe_werden_hier_gesammelt_anstatt_in	./fbfax.h	/^	T_Gescheiterte_Faxe_werden_hier_gesammelt_anstatt_in,$/;"	e	enum:T_
T_Hilfe	./kons.h	/^	T_Hilfe,$/;"	e	enum:Tkons_
T_Hostadresse_der_Fritzbox	./fbfax.h	/^	T_Hostadresse_der_Fritzbox,$/;"	e	enum:T_
T_Hostadresse_der_Fritzbox_	./fbfax.h	/^	T_Hostadresse_der_Fritzbox_,$/;"	e	enum:T_
T_Ins_Deinstallationsprogramm_wird_eingetragen	./kons.h	/^	T_Ins_Deinstallationsprogramm_wird_eingetragen,$/;"	e	enum:Tkons_
T_Installationsverzeichnis	./kons.h	/^	T_Installationsverzeichnis,$/;"	e	enum:Tkons_
T_Kann_Datei	./kons.h	/^  T_Kann_Datei,$/;"	e	enum:Tkons_
T_Kein_cron_gesetzt_nicht_zu_setzen	./kons.h	/^	T_Kein_cron_gesetzt_nicht_zu_setzen,$/;"	e	enum:Tkons_
T_Kompiliert	./kons.h	/^	T_Kompiliert,$/;"	e	enum:Tkons_
T_Konfiguration_fuer	./kons.h	/^  T_Konfiguration_fuer,$/;"	e	enum:Tkons_
T_Konfigurationsdatei	./kons.h	/^	T_Konfigurationsdatei,$/;"	e	enum:Tkons_
T_Konfigurationsdatei_schreiben	./kons.h	/^	T_Konfigurationsdatei_schreiben,$/;"	e	enum:Tkons_
T_Konfigurationsdateinamen	./kons.h	/^  T_Konfigurationsdateinamen,$/;"	e	enum:Tkons_
T_Konnte_Datei	./kons.h	/^  T_Konnte_Datei,$/;"	e	enum:Tkons_
T_Konnte_regulaeren_Ausdruck_nicht_kompilieren	./kons.h	/^	T_Konnte_regulaeren_Ausdruck_nicht_kompilieren,$/;"	e	enum:Tkons_
T_Letzte_Programmaenderung	./kons.h	/^	T_Letzte_Programmaenderung,$/;"	e	enum:Tkons_
T_Libtiff_Version	./kons.h	/^	T_Libtiff_Version,$/;"	e	enum:Tkons_
T_Linkverzeichnis	./kons.h	/^	T_Linkverzeichnis,$/;"	e	enum:Tkons_
T_Loesche_Ausrufezeichen	./kons.h	/^  T_Loesche_Ausrufezeichen,$/;"	e	enum:Tkons_
T_Logdatei	./kons.h	/^  T_Logdatei,$/;"	e	enum:Tkons_
T_Logdatei_usw_bearbeiten_sehen	./kons.h	/^	T_Logdatei_usw_bearbeiten_sehen,$/;"	e	enum:Tkons_
T_Logdateidpp	./kons.h	/^  T_Logdateidpp,$/;"	e	enum:Tkons_
T_Logdateiname	./kons.h	/^	T_Logdateiname,$/;"	e	enum:Tkons_
T_Logpfad	./kons.h	/^	T_Logpfad,$/;"	e	enum:Tkons_
T_Logverzeichnis	./kons.h	/^	T_Logverzeichnis,$/;"	e	enum:Tkons_
T_MAX	./fbfax.h	/^	T_MAX \/\/α$/;"	e	enum:T_
T_MSN_zum_Faxen	./fbfax.h	/^	T_MSN_zum_Faxen,$/;"	e	enum:T_
T_Maximaldauer_ueberschritten	./kons.h	/^	T_Maximaldauer_ueberschritten,$/;"	e	enum:Tkons_
T_Minute	./kons.h	/^	T_Minute,$/;"	e	enum:Tkons_
T_Minuten	./kons.h	/^	T_Minuten,$/;"	e	enum:Tkons_
T_Muss_Datei	./kons.h	/^  T_Muss_Datei,$/;"	e	enum:Tkons_
T_Nicht_numerischer	./kons.h	/^  T_Nicht_numerischer,$/;"	e	enum:Tkons_
T_Oblog_ausf_Protok	./kons.h	/^	T_Oblog_ausf_Protok,$/;"	e	enum:Tkons_
T_Optionen_die_in_der_Konfigurationsdatei_gespeichert_werden	./kons.h	/^	T_Optionen_die_in_der_Konfigurationsdatei_gespeichert_werden,$/;"	e	enum:Tkons_
T_Optionen_die_nicht_gespeichert_werden	./kons.h	/^	T_Optionen_die_nicht_gespeichert_werden,$/;"	e	enum:Tkons_
T_Parameter	./kons.h	/^	T_Parameter,$/;"	e	enum:Tkons_
T_Parameter_nr_zu	./kons.h	/^  T_Parameter_nr_zu,$/;"	e	enum:Tkons_
T_Passwort_fuer_Fritzbox	./fbfax.h	/^	T_Passwort_fuer_Fritzbox,$/;"	e	enum:T_
T_Passwort_fuer_samba	./kons.h	/^	T_Passwort_fuer_samba,$/;"	e	enum:Tkons_
T_Pfad_angegeben	./kons.h	/^  T_Pfad_angegeben,$/;"	e	enum:Tkons_
T_Program	./kons.h	/^  T_Program,$/;"	e	enum:Tkons_
T_Programm	./kons.h	/^	T_Programm,$/;"	e	enum:Tkons_
T_Programm_automatisch_aktualisieren	./kons.h	/^	T_Programm_automatisch_aktualisieren,$/;"	e	enum:Tkons_
T_Progvers	./kons.h	/^	T_Progvers,$/;"	e	enum:Tkons_
T_Quelldateien_in	./kons.h	/^	T_Quelldateien_in,$/;"	e	enum:Tkons_
T_Quelle	./kons.h	/^	T_Quelle,$/;"	e	enum:Tkons_
T_Rueckmeldung	./kons.h	/^  T_Rueckmeldung,$/;"	e	enum:Tkons_
T_Samba_muesste_installiert_werden_soll_ich	./kons.h	/^	T_Samba_muesste_installiert_werden_soll_ich,$/;"	e	enum:Tkons_
T_Soll_die_SuSEfirewall_bearbeitet_werden	./kons.h	/^	T_Soll_die_SuSEfirewall_bearbeitet_werden,$/;"	e	enum:Tkons_
T_Sollen_fehlende_Sambafreigaben_fuer_die_angegebenen_Verzeichnisse_ergaenzt_werden	./kons.h	/^	T_Sollen_fehlende_Sambafreigaben_fuer_die_angegebenen_Verzeichnisse_ergaenzt_werden,$/;"	e	enum:Tkons_
T_Sollen_neue_Programmversionen_von	./kons.h	/^	T_Sollen_neue_Programmversionen_von,$/;"	e	enum:Tkons_
T_Sonstiges	./kons.h	/^	T_Sonstiges,$/;"	e	enum:Tkons_
T_Spoolverzeichnisse_wie	./fbfax.h	/^	T_Spoolverzeichnisse_wie,$/;"	e	enum:T_
T_Sprachen	./kons.h	/^	T_Sprachen,$/;"	e	enum:Tkons_
T_Suchbefehl	./kons.h	/^  T_Suchbefehl,$/;"	e	enum:Tkons_
T_Suche_in	./kons.h	/^	T_Suche_in,$/;"	e	enum:Tkons_
T_Testaufruf_wegen_Programmbibliotheken	./kons.h	/^	T_Testaufruf_wegen_Programmbibliotheken,$/;"	e	enum:Tkons_
T_Tiefe	./kons.h	/^	T_Tiefe,$/;"	e	enum:Tkons_
T_Typbit	./kons.h	/^	T_Typbit,$/;"	e	enum:Tkons_
T_Variable_logdatei_Verzeichnis	./kons.h	/^	T_Variable_logdatei_Verzeichnis,$/;"	e	enum:Tkons_
T_Variable_logdatei_leer	./kons.h	/^  T_Variable_logdatei_leer,$/;"	e	enum:Tkons_
T_Verfasser	./kons.h	/^	T_Verfasser,$/;"	e	enum:Tkons_
T_Versuch	./kons.h	/^  T_Versuch,$/;"	e	enum:Tkons_
T_Verzeichnis	./kons.h	/^	T_Verzeichnis,$/;"	e	enum:Tkons_
T_Verzeichnis_mit_gefaxten_Dateien	./fbfax.h	/^	T_Verzeichnis_mit_gefaxten_Dateien,$/;"	e	enum:T_
T_Verzeichnis_mit_gescheiterten_Dateien	./fbfax.h	/^	T_Verzeichnis_mit_gescheiterten_Dateien,$/;"	e	enum:T_
T_Verzeichnis_mit_wartenden_Dateien	./fbfax.h	/^	T_Verzeichnis_mit_wartenden_Dateien,$/;"	e	enum:T_
T_VorgbSpeziell_Ueberlad	./vgb.cpp	/^  T_VorgbSpeziell_Ueberlad,$/;"	e	enum:Txvg_	file:
T_Weder_zypper_noch_apt_get_noch_dnf_noch_yum_als_Installationspgrogramm_gefunden	./kons.h	/^  T_Weder_zypper_noch_apt_get_noch_dnf_noch_yum_als_Installationspgrogramm_gefunden,$/;"	e	enum:Tkons_
T_Wert	./kons.h	/^	T_Wert,$/;"	e	enum:Tkons_
T_Zahl_der_Sekunden_fuer_ein_fax	./fbfax.h	/^	T_Zahl_der_Sekunden_fuer_ein_fax,$/;"	e	enum:T_
T_Zahl_der_aufzulistenden_Datensaetze_ist_zahl_statt	./fbfax.h	/^	T_Zahl_der_aufzulistenden_Datensaetze_ist_zahl_statt,$/;"	e	enum:T_
T_Zeigt_die_Programmversion_an	./kons.h	/^	T_Zeigt_die_Programmversion_an,$/;"	e	enum:Tkons_
T_Zeilen	./kons.h	/^  T_Zeilen,$/;"	e	enum:Tkons_
T_Zeit_Doppelpunkt	./kons.h	/^	T_Zeit_Doppelpunkt,$/;"	e	enum:Tkons_
T_Zielfaxnr	./fbfax.h	/^	T_Zielfaxnr,$/;"	e	enum:T_
T_absdr_k	./fbfax.h	/^	T_absdr_k,$/;"	e	enum:T_
T_absdr_l	./fbfax.h	/^	T_absdr_l,$/;"	e	enum:T_
T_absnr_k	./fbfax.h	/^	T_absnr_k,$/;"	e	enum:T_
T_absnr_l	./fbfax.h	/^	T_absnr_l,$/;"	e	enum:T_
T_activating	./kons.h	/^	T_activating,$/;"	e	enum:Tkons_
T_aktuelle_Einstellungen_aus	./kons.h	/^	T_aktuelle_Einstellungen_aus,$/;"	e	enum:Tkons_
T_alle	./kons.h	/^	T_alle,$/;"	e	enum:Tkons_
T_alle_Parameter_werden_abgefragt_darunter_einige_hier_nicht_gezeigte	./kons.h	/^	T_alle_Parameter_werden_abgefragt_darunter_einige_hier_nicht_gezeigte,$/;"	e	enum:Tkons_
T_als_Dienst_eingerichtet_von	./kons.h	/^  T_als_Dienst_eingerichtet_von,$/;"	e	enum:Tkons_
T_am	./kons.h	/^  T_am,$/;"	e	enum:Tkons_
T_an_k	./fbfax.h	/^	T_an_k,$/;"	e	enum:T_
T_an_l	./fbfax.h	/^	T_an_l,$/;"	e	enum:T_
T_anhalten	./fbfax.h	/^	T_anhalten,$/;"	e	enum:T_
T_anzeigen	./kons.h	/^  T_anzeigen,$/;"	e	enum:Tkons_
T_anzeigen_	./fbfax.h	/^	T_anzeigen_,$/;"	e	enum:T_
T_auf_Fax_angegebene_Absendernummer	./fbfax.h	/^	T_auf_Fax_angegebene_Absendernummer,$/;"	e	enum:T_
T_auf_Fax_angegebener_Absender	./fbfax.h	/^	T_auf_Fax_angegebener_Absender,$/;"	e	enum:T_
T_aufgerufen	./kons.h	/^	T_aufgerufen,$/;"	e	enum:Tkons_
T_aufgerufen_werden_0_ist_gar_nicht	./kons.h	/^	T_aufgerufen_werden_0_ist_gar_nicht,$/;"	e	enum:Tkons_
T_autokonfschreib	./kons.h	/^	T_autokonfschreib,$/;"	e	enum:Tkons_
T_automatisch_installiert_werden	./kons.h	/^	T_automatisch_installiert_werden,$/;"	e	enum:Tkons_
T_autoupd_k	./kons.h	/^	T_autoupd_k,$/;"	e	enum:Tkons_
T_autoupd_l	./kons.h	/^	T_autoupd_l,$/;"	e	enum:Tkons_
T_bearbeiten_sehen	./kons.h	/^	T_bearbeiten_sehen,$/;"	e	enum:Tkons_
T_beenden	./kons.h	/^  T_beenden,$/;"	e	enum:Tkons_
T_bei	./kons.h	/^	T_bei,$/;"	e	enum:Tkons_
T_cm_k	./kons.h	/^	T_cm_k,$/;"	e	enum:Tkons_
T_confdat_lies_Datei	./kons.h	/^	T_confdat_lies_Datei,$/;"	e	enum:Tkons_
T_confdat_lies_Erfolg	./kons.h	/^	T_confdat_lies_Erfolg,$/;"	e	enum:Tkons_
T_confdat_lies_Misserfolg	./kons.h	/^	T_confdat_lies_Misserfolg,$/;"	e	enum:Tkons_
T_cronminuten_l	./kons.h	/^	T_cronminuten_l,$/;"	e	enum:Tkons_
T_cronzuplanen	./kons.h	/^	T_cronzuplanen,$/;"	e	enum:Tkons_
T_datei	./kons.h	/^	T_datei,$/;"	e	enum:Tkons_
T_datei_l	./fbfax.h	/^	T_datei_l,$/;"	e	enum:T_
T_doinst	./kons.h	/^	T_doinst,$/;"	e	enum:Tkons_
T_dszahl_l	./fbfax.h	/^	T_dszahl_l,$/;"	e	enum:T_
T_dt_k	./fbfax.h	/^	T_dt_k,$/;"	e	enum:T_
T_eigene	./kons.h	/^	T_eigene,$/;"	e	enum:Tkons_
T_einzutragen	./kons.h	/^	T_einzutragen,$/;"	e	enum:Tkons_
T_enableggf	./kons.h	/^	T_enableggf,$/;"	e	enum:Tkons_
T_erfolgreich_fuer	./kons.h	/^	T_erfolgreich_fuer,$/;"	e	enum:Tkons_
T_ermoeglicht	./kons.h	/^	T_ermoeglicht,$/;"	e	enum:Tkons_
T_erneute_Eingabe	./kons.h	/^  T_erneute_Eingabe,$/;"	e	enum:Tkons_
T_erstellt_automatisch_durch_dieses_am	./kons.h	/^  T_erstellt_automatisch_durch_dieses_am,$/;"	e	enum:Tkons_
T_fallsnichtda	./kons.h	/^	T_fallsnichtda,$/;"	e	enum:Tkons_
T_fehlgeschlagen_bei	./kons.h	/^  T_fehlgeschlagen_bei,$/;"	e	enum:Tkons_
T_fgz_k	./kons.h	/^	T_fgz_k,$/;"	e	enum:Tkons_
T_fgz_l	./kons.h	/^	T_fgz_l,$/;"	e	enum:Tkons_
T_fuer	./kons.h	/^  T_fuer,$/;"	e	enum:Tkons_
T_fuer_Benutzer	./kons.h	/^	T_fuer_Benutzer,$/;"	e	enum:Tkons_
T_gar_nicht	./kons.h	/^	T_gar_nicht,$/;"	e	enum:Tkons_
T_gefaxtvz_l	./fbfax.h	/^	T_gefaxtvz_l,$/;"	e	enum:T_
T_gefunden	./kons.h	/^	T_gefunden,$/;"	e	enum:Tkons_
T_geladen	./kons.h	/^  T_geladen,$/;"	e	enum:Tkons_
T_gestoppt	./fbfax.h	/^	T_gestoppt,$/;"	e	enum:T_
T_gfvz_k	./fbfax.h	/^	T_gfvz_k,$/;"	e	enum:T_
T_gibt_es_noch_nicht_Kuerze_sie_daher_nicht	./kons.h	/^  T_gibt_es_noch_nicht_Kuerze_sie_daher_nicht,$/;"	e	enum:Tkons_
T_h_k	./kons.h	/^	T_h_k,$/;"	e	enum:Tkons_
T_hcl_hcl	./kons.h	/^	T_hcl_hcl,$/;"	e	enum:Tkons_
T_hilfe_l	./kons.h	/^	T_hilfe_l,$/;"	e	enum:Tkons_
T_holsystemsprache	./kons.h	/^	T_holsystemsprache,$/;"	e	enum:Tkons_
T_holtif	./fbfax.h	/^	T_holtif,$/;"	e	enum:T_
T_host_k	./fbfax.h	/^	T_host_k,$/;"	e	enum:T_
T_host_l	./fbfax.h	/^	T_host_l,$/;"	e	enum:T_
T_in_main_pidv_am_Schluss	./kons.h	/^	T_in_main_pidv_am_Schluss,$/;"	e	enum:Tkons_
T_in_pvirtfuehraus	./fbfax.h	/^	T_in_pvirtfuehraus,$/;"	e	enum:T_
T_info_k	./kons.h	/^	T_info_k,$/;"	e	enum:Tkons_
T_j_af	./kons.h	/^	T_j_af,$/;"	e	enum:Tkons_
T_j_k	./kons.h	/^  T_j_k,$/;"	e	enum:Tkons_
T_ja	./kons.h	/^	T_ja,$/;"	e	enum:Tkons_
T_kauswert	./kons.h	/^	T_kauswert,$/;"	e	enum:Tkons_
T_kd_k	./kons.h	/^	T_kd_k,$/;"	e	enum:Tkons_
T_kein_Aufruf	./kons.h	/^	T_kein_Aufruf,$/;"	e	enum:Tkons_
T_kein_Verzeichnis_nochmal	./kons.h	/^  T_kein_Verzeichnis_nochmal,$/;"	e	enum:Tkons_
T_keine_Daten_zum_Anzeigen_Bearbeiten	./kons.h	/^	T_keine_Daten_zum_Anzeigen_Bearbeiten,$/;"	e	enum:Tkons_
T_keine_Rueckfragen_zB_aus_Cron	./kons.h	/^	T_keine_Rueckfragen_zB_aus_Cron,$/;"	e	enum:Tkons_
T_keinerueckfragen_l	./kons.h	/^	T_keinerueckfragen_l,$/;"	e	enum:Tkons_
T_kf_k	./kons.h	/^  T_kf_k,$/;"	e	enum:Tkons_
T_komma_Ergebnis	./kons.h	/^  T_komma_Ergebnis,$/;"	e	enum:Tkons_
T_kommagetrennte_Minutenfolge_der_Sendeversuche	./fbfax.h	/^	T_kommagetrennte_Minutenfolge_der_Sendeversuche,$/;"	e	enum:T_
T_konfdatei_l	./kons.h	/^	T_konfdatei_l,$/;"	e	enum:Tkons_
T_konfzeiglang_l	./kons.h	/^  T_konfzeiglang_l,$/;"	e	enum:Tkons_
T_konsMAX	./kons.h	/^	T_konsMAX$/;"	e	enum:Tkons_
T_krf_k	./kons.h	/^	T_krf_k,$/;"	e	enum:Tkons_
T_ks_k	./kons.h	/^	T_ks_k,$/;"	e	enum:Tkons_
T_kschreib_l	./kons.h	/^	T_kschreib_l,$/;"	e	enum:Tkons_
T_kuerze_logdatei	./kons.h	/^  T_kuerze_logdatei,$/;"	e	enum:Tkons_
T_l_k	./kons.h	/^	T_l_k,$/;"	e	enum:Tkons_
T_laeuft_jetzt	./kons.h	/^	T_laeuft_jetzt,$/;"	e	enum:Tkons_
T_laeuft_noch	./kons.h	/^	T_laeuft_noch,$/;"	e	enum:Tkons_
T_laeuft_schon_einmal_seit	./kons.h	/^  T_laeuft_schon_einmal_seit,$/;"	e	enum:Tkons_
T_lang_k	./kons.h	/^	T_lang_k,$/;"	e	enum:Tkons_
T_language_l	./kons.h	/^	T_language_l,$/;"	e	enum:Tkons_
T_laueft_schon_einmal_aber	./kons.h	/^	T_laueft_schon_einmal_aber,$/;"	e	enum:Tkons_
T_ld_k	./kons.h	/^	T_ld_k,$/;"	e	enum:Tkons_
T_ldn_k	./kons.h	/^	T_ldn_k,$/;"	e	enum:Tkons_
T_lg_k	./kons.h	/^	T_lg_k,$/;"	e	enum:Tkons_
T_lh_k	./kons.h	/^	T_lh_k,$/;"	e	enum:Tkons_
T_lhilfe_l	./kons.h	/^	T_lhilfe_l,$/;"	e	enum:Tkons_
T_libtest	./kons.h	/^	T_libtest,$/;"	e	enum:Tkons_
T_lief_schon	./kons.h	/^  T_lief_schon,$/;"	e	enum:Tkons_
T_lies	./kons.h	/^	T_lies,$/;"	e	enum:Tkons_
T_lieszaehlerein	./kons.h	/^	T_lieszaehlerein,$/;"	e	enum:Tkons_
T_lingue_l	./kons.h	/^	T_lingue_l,$/;"	e	enum:Tkons_
T_log_l	./kons.h	/^	T_log_l,$/;"	e	enum:Tkons_
T_logdatei_string_im_Pfad	./kons.h	/^	T_logdatei_string_im_Pfad,$/;"	e	enum:Tkons_
T_logdatei_vorher_loeschen	./kons.h	/^	T_logdatei_vorher_loeschen,$/;"	e	enum:Tkons_
T_logdateineu_l	./kons.h	/^	T_logdateineu_l,$/;"	e	enum:Tkons_
T_logdname_l	./kons.h	/^	T_logdname_l,$/;"	e	enum:Tkons_
T_logvz_l	./kons.h	/^	T_logvz_l,$/;"	e	enum:Tkons_
T_lvz_k	./kons.h	/^	T_lvz_k,$/;"	e	enum:Tkons_
T_machfit	./kons.h	/^  T_machfit,$/;"	e	enum:Tkons_
T_maxsec_k	./fbfax.h	/^	T_maxsec_k,$/;"	e	enum:T_
T_maxsec_l	./fbfax.h	/^	T_maxsec_l,$/;"	e	enum:T_
T_mfolge_k	./fbfax.h	/^	T_mfolge_k,$/;"	e	enum:T_
T_mfolge_l	./fbfax.h	/^	T_mfolge_l,$/;"	e	enum:T_
T_mit_Datei_als	./kons.h	/^  T_mit_Datei_als,$/;"	e	enum:Tkons_
T_mit_falschem	./kons.h	/^  T_mit_falschem,$/;"	e	enum:Tkons_
T_mit_w_werden_die_Einstellungen_noch_ausfuehrlicher_angezeigt	./kons.h	/^	T_mit_w_werden_die_Einstellungen_noch_ausfuehrlicher_angezeigt,$/;"	e	enum:Tkons_
T_msn_k	./fbfax.h	/^	T_msn_k,$/;"	e	enum:T_
T_msn_l	./fbfax.h	/^	T_msn_l,$/;"	e	enum:T_
T_muss_nicht_aktualisiert_werden	./kons.h	/^	T_muss_nicht_aktualisiert_werden,$/;"	e	enum:Tkons_
T_n_k	./fbfax.h	/^	T_n_k,$/;"	e	enum:T_
T_nach	./kons.h	/^	T_nach,$/;"	e	enum:Tkons_
T_nach__	./kons.h	/^	T_nach__,$/;"	e	enum:Tkons_
T_nach_sh_viall_beendet	./kons.h	/^	T_nach_sh_viall_beendet,$/;"	e	enum:Tkons_
T_nein	./kons.h	/^	T_nein,$/;"	e	enum:Tkons_
T_ngvz_k	./fbfax.h	/^	T_ngvz_k,$/;"	e	enum:T_
T_nicht_als_Sambafreigabe_gefunden_wird_ergaenzt_in	./kons.h	/^	T_nicht_als_Sambafreigabe_gefunden_wird_ergaenzt_in,$/;"	e	enum:Tkons_
T_nicht_als_fstream_zum_Anhaengen_oeffnen	./kons.h	/^  T_nicht_als_fstream_zum_Anhaengen_oeffnen,$/;"	e	enum:Tkons_
T_nicht_als_fstream_zum_Lesen_oeffnen	./kons.h	/^  T_nicht_als_fstream_zum_Lesen_oeffnen,$/;"	e	enum:Tkons_
T_nicht_als_fstream_zum_Schreiben_oeffnen	./kons.h	/^  T_nicht_als_fstream_zum_Schreiben_oeffnen,$/;"	e	enum:Tkons_
T_nicht_einfuegbar	./kons.h	/^	T_nicht_einfuegbar,$/;"	e	enum:Tkons_
T_nicht_erkannt	./kons.h	/^	T_nicht_erkannt,$/;"	e	enum:Tkons_
T_nicht_ermoeglicht	./kons.h	/^	T_nicht_ermoeglicht,$/;"	e	enum:Tkons_
T_nicht_gefunden	./kons.h	/^  T_nicht_gefunden,$/;"	e	enum:Tkons_
T_nicht_gefunden_soll_ich_es_erstellen	./kons.h	/^  T_nicht_gefunden_soll_ich_es_erstellen,$/;"	e	enum:Tkons_
T_nicht_gefunden_versuche_ihn_einzurichten	./kons.h	/^  T_nicht_gefunden_versuche_ihn_einzurichten,$/;"	e	enum:Tkons_
T_nicht_geladen	./kons.h	/^  T_nicht_geladen,$/;"	e	enum:Tkons_
T_nicht_geloescht_war_eh_nicht_mehr_da	./kons.h	/^  T_nicht_geloescht_war_eh_nicht_mehr_da,$/;"	e	enum:Tkons_
T_nicht_mehr_da	./kons.h	/^	T_nicht_mehr_da,$/;"	e	enum:Tkons_
T_nicht_mit_fopen_zum_Anhaengen_oeffnen	./kons.h	/^  T_nicht_mit_fopen_zum_Anhaengen_oeffnen,$/;"	e	enum:Tkons_
T_nicht_mit_fopen_zum_Lesen_oeffnen	./kons.h	/^  T_nicht_mit_fopen_zum_Lesen_oeffnen,$/;"	e	enum:Tkons_
T_nicht_mit_fopen_zum_Schreiben_oeffnen	./kons.h	/^  T_nicht_mit_fopen_zum_Schreiben_oeffnen,$/;"	e	enum:Tkons_
T_nicht_mit_open_zum_Anhaengen_oeffnen	./kons.h	/^	T_nicht_mit_open_zum_Anhaengen_oeffnen,$/;"	e	enum:Tkons_
T_nicht_zum_Lesen_oeffnen	./kons.h	/^  T_nicht_zum_Lesen_oeffnen,$/;"	e	enum:Tkons_
T_nicht_zum_Schreiben_oeffnen	./kons.h	/^  T_nicht_zum_Schreiben_oeffnen,$/;"	e	enum:Tkons_
T_nichtgefaxtvz_l	./fbfax.h	/^	T_nichtgefaxtvz_l,$/;"	e	enum:T_
T_noext	./kons.h	/^	T_noext,$/;"	e	enum:Tkons_
T_nr_k	./fbfax.h	/^	T_nr_k,$/;"	e	enum:T_
T_nurrein_l	./fbfax.h	/^	T_nurrein_l,$/;"	e	enum:T_
T_oblog	./kons.h	/^	T_oblog,$/;"	e	enum:Tkons_
T_obsfveh	./kons.h	/^	T_obsfveh,$/;"	e	enum:Tkons_
T_obunter	./kons.h	/^	T_obunter,$/;"	e	enum:Tkons_
T_oder	./kons.h	/^	T_oder,$/;"	e	enum:Tkons_
T_oder_nicht	./kons.h	/^	T_oder_nicht,$/;"	e	enum:Tkons_
T_offen	./kons.h	/^	T_offen,$/;"	e	enum:Tkons_
T_ohne_gueltigen	./kons.h	/^  T_ohne_gueltigen,$/;"	e	enum:Tkons_
T_ohneabh	./kons.h	/^	T_ohneabh,$/;"	e	enum:Tkons_
T_optausg	./kons.h	/^	T_optausg,$/;"	e	enum:Tkons_
T_or	./kons.h	/^	T_or,$/;"	e	enum:Tkons_
T_parsecl	./kons.h	/^	T_parsecl,$/;"	e	enum:Tkons_
T_pfad	./kons.h	/^  T_pfad,$/;"	e	enum:Tkons_
T_pptr_darf_nicht_null_sein_bei	./kons.h	/^	T_pptr_darf_nicht_null_sein_bei,$/;"	e	enum:Tkons_
T_pptr_gefunden	./kons.h	/^	T_pptr_gefunden,$/;"	e	enum:Tkons_
T_protokolliert_ausfuehrlich_in_Datei	./kons.h	/^	T_protokolliert_ausfuehrlich_in_Datei,$/;"	e	enum:Tkons_
T_pruefberecht	./kons.h	/^	T_pruefberecht,$/;"	e	enum:Tkons_
T_pruefcron	./kons.h	/^	T_pruefcron,$/;"	e	enum:Tkons_
T_pruefmehrfach	./kons.h	/^	T_pruefmehrfach,$/;"	e	enum:Tkons_
T_pruefpar	./kons.h	/^  T_pruefpar,$/;"	e	enum:Tkons_
T_pruefsamba	./kons.h	/^	T_pruefsamba,$/;"	e	enum:Tkons_
T_prueftif	./kons.h	/^	T_prueftif,$/;"	e	enum:Tkons_
T_pvirtVorgbSpeziell	./fbfax.h	/^	T_pvirtVorgbSpeziell,$/;"	e	enum:T_
T_pvirtfuehraus	./fbfax.h	/^	T_pvirtfuehraus,$/;"	e	enum:T_
T_pvirtnachrueckfragen	./fbfax.h	/^	T_pvirtnachrueckfragen,$/;"	e	enum:T_
T_pvirtvorrueckfragen	./fbfax.h	/^	T_pvirtvorrueckfragen,$/;"	e	enum:T_
T_pwd	./fbfax.h	/^	T_pwd,$/;"	e	enum:T_
T_pwd_k	./fbfax.h	/^	T_pwd_k,$/;"	e	enum:T_
T_pwd_l	./fbfax.h	/^	T_pwd_l,$/;"	e	enum:T_
T_rf_k	./kons.h	/^	T_rf_k,$/;"	e	enum:Tkons_
T_rueckfragen	./kons.h	/^	T_rueckfragen,$/;"	e	enum:Tkons_
T_rueckfragen_l	./kons.h	/^	T_rueckfragen_l,$/;"	e	enum:Tkons_
T_rueckzufragen	./kons.h	/^	T_rueckzufragen,$/;"	e	enum:Tkons_
T_rueckzufragen_wegen	./kons.h	/^	T_rueckzufragen_wegen,$/;"	e	enum:Tkons_
T_schon_eingetragen	./kons.h	/^	T_schon_eingetragen,$/;"	e	enum:Tkons_
T_schreibe_Konfiguration	./kons.h	/^	T_schreibe_Konfiguration,$/;"	e	enum:Tkons_
T_sec_Breche_ab	./kons.h	/^	T_sec_Breche_ab,$/;"	e	enum:Tkons_
T_semodpruef	./kons.h	/^	T_semodpruef,$/;"	e	enum:Tkons_
T_sh	./kons.h	/^	T_sh,$/;"	e	enum:Tkons_
T_sonst_knapper	./kons.h	/^	T_sonst_knapper,$/;"	e	enum:Tkons_
T_sprachstr	./kons.h	/^	T_sprachstr,$/;"	e	enum:Tkons_
T_spruef_sname	./kons.h	/^  T_spruef_sname,$/;"	e	enum:Tkons_
T_st_k	./fbfax.h	/^	T_st_k,$/;"	e	enum:T_
T_standardhilfe	./kons.h	/^	T_standardhilfe,$/;"	e	enum:Tkons_
T_startundenable	./kons.h	/^	T_startundenable,$/;"	e	enum:Tkons_
T_statt	./kons.h	/^	T_statt,$/;"	e	enum:Tkons_
T_stellt_Faxe_nur_rein	./fbfax.h	/^	T_stellt_Faxe_nur_rein,$/;"	e	enum:T_
T_stop_l	./fbfax.h	/^	T_stop_l,$/;"	e	enum:T_
T_stopdis_sname	./kons.h	/^	T_stopdis_sname,$/;"	e	enum:Tkons_
T_stu_k	./kons.h	/^	T_stu_k,$/;"	e	enum:Tkons_
T_stumm_l	./kons.h	/^	T_stumm_l,$/;"	e	enum:Tkons_
T_trenne	./kons.h	/^	T_trenne,$/;"	e	enum:Tkons_
T_unbek	./kons.h	/^	T_unbek,$/;"	e	enum:Tkons_
T_unveraendert	./kons.h	/^	T_unveraendert,$/;"	e	enum:Tkons_
T_usr_k	./fbfax.h	/^	T_usr_k,$/;"	e	enum:T_
T_usr_l	./fbfax.h	/^	T_usr_l,$/;"	e	enum:T_
T_v_k	./kons.h	/^	T_v_k,$/;"	e	enum:Tkons_
T_verarbeitkonf	./kons.h	/^	T_verarbeitkonf,$/;"	e	enum:Tkons_
T_verbose_l	./kons.h	/^	T_verbose_l,$/;"	e	enum:Tkons_
T_version_l	./kons.h	/^	T_version_l,$/;"	e	enum:Tkons_
T_verwendet_Konfigurationsdatei_string_anstatt	./kons.h	/^	T_verwendet_Konfigurationsdatei_string_anstatt,$/;"	e	enum:Tkons_
T_verwendet_fuer_die_Fritzbox_das_Passwort_string	./fbfax.h	/^	T_verwendet_fuer_die_Fritzbox_das_Passwort_string,$/;"	e	enum:T_
T_verwendet_fuer_die_Fritzbox_den_Benutzer_string_anstatt	./fbfax.h	/^	T_verwendet_fuer_die_Fritzbox_den_Benutzer_string_anstatt,$/;"	e	enum:T_
T_verwendet_wird	./kons.h	/^	T_verwendet_wird,$/;"	e	enum:Tkons_
T_verzeichnisse	./fbfax.h	/^	T_verzeichnisse,$/;"	e	enum:T_
T_vgMAX	./vgb.cpp	/^  T_vgMAX,$/;"	e	enum:Txvg_	file:
T_vi_k	./kons.h	/^	T_vi_k,$/;"	e	enum:Tkons_
T_vi_l	./kons.h	/^	T_vi_l,$/;"	e	enum:Tkons_
T_virtMusterVorgb	./fbfax.h	/^	T_virtMusterVorgb,$/;"	e	enum:T_
T_virtVorgbAllg	./fbfax.h	/^	T_virtVorgbAllg,$/;"	e	enum:T_
T_virtlgnzuw_langu	./kons.h	/^	T_virtlgnzuw_langu,$/;"	e	enum:Tkons_
T_virtlieskonfein	./kons.h	/^	T_virtlieskonfein,$/;"	e	enum:Tkons_
T_virtmacherkl_Tx_lgn	./fbfax.h	/^	T_virtmacherkl_Tx_lgn,$/;"	e	enum:T_
T_virtpruefweiteres	./fbfax.h	/^	T_virtpruefweiteres,$/;"	e	enum:T_
T_virtrueckfragen	./fbfax.h	/^	T_virtrueckfragen,$/;"	e	enum:T_
T_virtschlussanzeige	./kons.h	/^	T_virtschlussanzeige,$/;"	e	enum:Tkons_
T_virttesterg	./fbfax.h	/^	T_virttesterg,$/;"	e	enum:T_
T_virtzeigueberschrift	./fbfax.h	/^	T_virtzeigueberschrift, $/;"	e	enum:T_
T_virtzeigversion	./fbfax.h	/^	T_virtzeigversion,$/;"	e	enum:T_
T_vs_k	./kons.h	/^	T_vs_k,$/;"	e	enum:Tkons_
T_vs_l	./kons.h	/^	T_vs_l,$/;"	e	enum:Tkons_
T_waehlt_als_Logverzeichnis_pfad_derzeit	./kons.h	/^	T_waehlt_als_Logverzeichnis_pfad_derzeit,$/;"	e	enum:Tkons_
T_warte	./kons.h	/^	T_warte,$/;"	e	enum:Tkons_
T_wartevz_l	./fbfax.h	/^	T_wartevz_l,$/;"	e	enum:T_
T_wird	./kons.h	/^	T_wird,$/;"	e	enum:Tkons_
T_wird_aktualisiert_bitte_ggf_neu_starten	./kons.h	/^	T_wird_aktualisiert_bitte_ggf_neu_starten,$/;"	e	enum:Tkons_
T_wird_deshalb_abgebrochen	./kons.h	/^	T_wird_deshalb_abgebrochen,$/;"	e	enum:Tkons_
T_wird_jetzt_eingetragen	./kons.h	/^	T_wird_jetzt_eingetragen,$/;"	e	enum:Tkons_
T_wird_verwendet_anstatt	./kons.h	/^	T_wird_verwendet_anstatt,$/;"	e	enum:Tkons_
T_wvz_k	./fbfax.h	/^	T_wvz_k,$/;"	e	enum:T_
T_zeigvers	./kons.h	/^	T_zeigvers,$/;"	e	enum:Tkons_
T_zgvz_k	./fbfax.h	/^	T_zgvz_k,$/;"	e	enum:T_
T_zgvz_l	./fbfax.h	/^	T_zgvz_l,$/;"	e	enum:T_
T_zu	./kons.h	/^	T_zu,$/;"	e	enum:Tkons_
T_zu_faxende_Datei	./fbfax.h	/^	T_zu_faxende_Datei,$/;"	e	enum:T_
T_zu_schreiben	./kons.h	/^	T_zu_schreiben,$/;"	e	enum:Tkons_
T_zugreifbar_machen	./kons.h	/^  T_zugreifbar_machen,$/;"	e	enum:Tkons_
Tippbuchst	./kons.cpp	/^char Tippbuchst(const string& frage, const string& moegl,const char *berkl[], const char* erlaubt, const char *vorgabe) $/;"	f
Tippob	./kons.cpp	/^uchar Tippob(const string& frage,const char *vorgabe) $/;"	f
Tippstr	./kons.cpp	/^string Tippstr(const char *const frage, const string *const vorgabe,const uchar obnichtleer\/*=1*\/) $/;"	f
Tippstr	./kons.cpp	/^string Tippstr(const string& frage, const string *const vorgabe,const uchar obnichtleer\/*=1*\/) $/;"	f
Tippstrs	./kons.cpp	/^string Tippstrs(const char *const frage, const char* const moegl[], const char *const vorgabe\/*=0*\/)$/;"	f
Tippstrs	./kons.cpp	/^string Tippstrs(const char *frage, const vector<string> *const moegl, const string *const vorgabe\/*=0*\/)$/;"	f
Tippverz	./kons.cpp	/^string Tippverz(const char *const frage,const string *const vorgabe) $/;"	f
Tippverz	./kons.cpp	/^string Tippverz(const string& frage,const string *const vorgabe) $/;"	f
Tippzahl	./kons.cpp	/^long Tippzahl(const string& frage,const long& vorgabe)$/;"	f
Tippzahl	./kons.cpp	/^string Tippzahl(const char *const frage, const char *const vorgabe\/*=0*\/) $/;"	f
Tippzahl	./kons.cpp	/^string Tippzahl(const char *const frage, const string *const vorgabe) $/;"	f
Tippzahl	./kons.cpp	/^string Tippzahl(const string& frage, const string *const vorgabe)$/;"	f
Tkons_	./kons.h	/^enum Tkons_ $/;"	g
TxB	./kons.cpp	/^TxB::TxB(const char* const* const* const *TCp):TCp(TCp)$/;"	f	class:TxB
TxB	./kons.h	/^struct TxB \/\/ Text-Basisklasse$/;"	s
Txtrf	./kons.h	/^		const string Txtrf;$/;"	m	struct:optcl
Txvg_	./vgb.cpp	/^enum Txvg_ {$/;"	g	file:
USE_ISDN_MUTEX	./faxophone.h	67;"	d
USE_PRINTER_SPOOLER	./config.h	154;"	d
Ubuntu	./kons.h	/^enum distroenum{unbek=-1,Mint,Ubuntu,Debian,Suse,Fedora,Fedoraalt,Mageia,Manjaro};$/;"	e	enum:distroenum
VERSION	./config.h	157;"	d
VOMHAUPTCODE	./fbfax.cpp	8;"	d	file:
VerzeichnisGibts	./kons.cpp	/^uchar VerzeichnisGibts(const char* vname)$/;"	f
WPcl	./kons.cpp	/^WPcl::WPcl(const string& pname,const void* pptr,par_t part):wpgcl(pname,pptr,part)$/;"	f	class:WPcl
WPcl	./kons.h	/^struct WPcl:wpgcl $/;"	s
XOR	./kons.cpp	/^string XOR(const string& value, const string& key)$/;"	f
_	./direkt.c	100;"	d	file:
_	./direkt.c	99;"	d	file:
_	./routermanager.h	32;"	d
_AppObject	./appobject.h	/^struct _AppObject {$/;"	s
_AppObjectClass	./appobject.h	/^struct _AppObjectClass {$/;"	s
_AppObjectPrivate	./appobject.c	/^struct _AppObjectPrivate {$/;"	s	file:
_CRT_SECURE_NO_WARNINGS	./kons.h	2;"	d
_DPROG	./kons.cpp	/^string _DPROG;$/;"	v
_access	./kons.cpp	54;"	d	file:
_blau	./kons.cpp	/^const char *_drot=drot, *_rot=rot, *_schwarz=schwarz, *_blau=blau, *_gelb=gelb, *_tuerkis=tuerkis, *_hgrau=hgrau;$/;"	v
_blau	./kons.h	/^inline std::ostream& _blau(std::ostream &s){$/;"	f	class:std
_drot	./kons.cpp	/^const char *_drot=drot, *_rot=rot, *_schwarz=schwarz, *_blau=blau, *_gelb=gelb, *_tuerkis=tuerkis, *_hgrau=hgrau;$/;"	v
_drot	./kons.h	/^inline std::ostream& _drot(std::ostream &s){$/;"	f	class:std
_gelb	./kons.cpp	/^const char *_drot=drot, *_rot=rot, *_schwarz=schwarz, *_blau=blau, *_gelb=gelb, *_tuerkis=tuerkis, *_hgrau=hgrau;$/;"	v
_gelb	./kons.h	/^inline std::ostream& _gelb(std::ostream &s){$/;"	f	class:std
_hgrau	./kons.cpp	/^const char *_drot=drot, *_rot=rot, *_schwarz=schwarz, *_blau=blau, *_gelb=gelb, *_tuerkis=tuerkis, *_hgrau=hgrau;$/;"	v
_law_2_linear16	./fax.c	/^static uint16_t *_law_2_linear16 = &law_2_linear16[0];$/;"	v	file:
_linear16_2_law	./fax.c	/^static int8_t *_linear16_2_law = (int8_t *) &linear16_2_law[32768];$/;"	v	file:
_mpfad	./kons.cpp	/^string _mpfad;$/;"	v
_rot	./kons.cpp	/^const char *_drot=drot, *_rot=rot, *_schwarz=schwarz, *_blau=blau, *_gelb=gelb, *_tuerkis=tuerkis, *_hgrau=hgrau;$/;"	v
_rot	./kons.h	/^inline std::ostream& _rot(std::ostream &s){$/;"	f	class:std
_schwarz	./kons.cpp	/^const char *_drot=drot, *_rot=rot, *_schwarz=schwarz, *_blau=blau, *_gelb=gelb, *_tuerkis=tuerkis, *_hgrau=hgrau;$/;"	v
_schwarz	./kons.h	/^inline std::ostream& _schwarz(std::ostream &s){$/;"	f	class:std
_tuerkis	./kons.cpp	/^const char *_drot=drot, *_rot=rot, *_schwarz=schwarz, *_blau=blau, *_gelb=gelb, *_tuerkis=tuerkis, *_hgrau=hgrau;$/;"	v
aScl	./kons.h	/^   aScl(const string& name, const string *wertp):name(name),wertp(wertp) {}$/;"	f	struct:aScl
aScl	./kons.h	/^struct aScl {$/;"	s
aSvec	./kons.h	/^struct aSvec:vector<aScl>$/;"	s
absch	./kons.h	/^struct absch$/;"	s
abschv	./kons.h	/^	vector<absch> abschv;$/;"	m	struct:confdcl
absdr	./fbfax.h	/^		string absdr; \/\/ auf Fax angegebener Absender$/;"	m	class:hhcl
absnr	./fbfax.h	/^		string absnr; \/\/ auf Fax angegebene Absendernummer$/;"	m	class:hhcl
active_capi_connection	./fax_phone.c	/^struct capi_connection *active_capi_connection = NULL;$/;"	v	typeref:struct:
addresses	./contact.h	/^	GSList *addresses;$/;"	m	struct:contact
agef	./kons.h	/^ uchar agef=0; \/\/ dieser wurde gefunden$/;"	m	struct:argcl
akonfdt	./kons.h	/^    string akonfdt; \/\/ name der Konfigurationsdatei$/;"	m	struct:hcl
aktprogverz	./kons.cpp	/^string aktprogverz()$/;"	f
alaw2linear	./isdn-convert.c	/^static short alaw2linear(unsigned char alaw_byte)$/;"	f	file:
alaw_get_sign_mag	./isdn-convert.c	/^static inline void alaw_get_sign_mag(short sample, unsigned *sign, unsigned *mag)$/;"	f	file:
altfind	./kons.h	112;"	d
an	./fbfax.h	/^		string an; \/\/ Zielfaxnr$/;"	m	class:hhcl
aname	./kons.h	/^ string aname;$/;"	m	struct:absch
anfgg	./kons.cpp	/^void anfgg(const string& datei, const string& inhalt, const string& comment, int obverb\/*=0*\/, int oblog\/*=0*\/)$/;"	f
anfgw	./kons.cpp	/^void anfgw(const string& datei, const string& udpr, const string& inhalt, const string& comment, int obverb\/*=0*\/, int oblog\/*=0*\/)$/;"	f
anfzweg	./kons.cpp	/^string* anfzweg(string *quelp) {$/;"	f
anhalten	./fbfax.cpp	/^void hhcl::anhalten()$/;"	f	class:hhcl
aocl	./appobject.c	/^aocl::aocl()$/;"	f	class:aocl
aocl	./appobject.h	/^struct aocl$/;"	s
app_marshal_VOID__POINTER_POINTER	./appobject.c	/^void app_marshal_VOID__POINTER_POINTER(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)$/;"	f
app_object_class_init	./appobject.c	/^static void app_object_class_init(AppObjectClass *klass)$/;"	f	file:
app_object_create_signals	./appobject.c	/^static void app_object_create_signals(GObjectClass *g_object_class)$/;"	f	file:
app_object_init	./appobject.c	/^static void app_object_init(AppObject *self)$/;"	f	file:
appl_id	./faxophone.h	/^	int appl_id;$/;"	m	struct:session
apt	./kons.h	/^enum instprog {keinp,zypper,apt,dnf,yum,urp,pac};$/;"	e	enum:instprog
argcl	./kons.cpp	/^argcl::argcl(const int i,const char *const *const argv):argcs(argv[i])$/;"	f	class:argcl
argcl	./kons.h	/^struct argcl$/;"	s
argcmv	./kons.h	/^		vector<argcl> argcmv; \/\/ struct member vector$/;"	m	struct:hcl
argcs	./kons.h	/^ const char *argcs;  \/\/ Zeiger auf einen Commandline-Parameter$/;"	m	struct:argcl
attrangleich	./kons.cpp	/^int attrangleich(const string& zu, const string& gemaess,const string* const zeitvondtp\/*=0*\/, int obverb\/*=0*\/, int oblog\/*=0*\/)$/;"	f
audio	./audio.h	/^struct audio {$/;"	s
audio	./faxophone.h	/^	gpointer audio;$/;"	m	struct:capi_connection
audio_close	./audio.c	/^gboolean audio_close(gpointer audio_priv)$/;"	f
audio_close	./faxophone.h	/^	gboolean (*audio_close)(gpointer audio);$/;"	m	struct:session_handlers_st
audio_device	./audio.h	/^struct audio_device {$/;"	s
audio_get_default	./audio.c	/^struct audio *audio_get_default(void)$/;"	f
audio_get_plugins	./audio.c	/^GSList *audio_get_plugins(void)$/;"	f
audio_input	./faxophone.h	/^	gsize (*audio_input)(gpointer audio, guchar *buf, gsize len);$/;"	m	struct:session_handlers_st
audio_list	./audio.c	/^static GSList *audio_list = NULL;$/;"	v	file:
audio_open	./audio.c	/^gpointer audio_open(void)$/;"	f
audio_open	./faxophone.h	/^	gpointer (*audio_open)(void);$/;"	m	struct:session_handlers_st
audio_output	./faxophone.h	/^	gsize (*audio_output)(gpointer audio, guchar *buf, gsize len);$/;"	m	struct:session_handlers_st
audio_read	./audio.c	/^gsize audio_read(gpointer audio_priv, guchar *data, gsize size)$/;"	f
audio_set_default	./audio.c	/^void audio_set_default(gchar *name)$/;"	f
audio_write	./audio.c	/^gsize audio_write(gpointer audio_priv, guchar *data, gsize size)$/;"	f
aufSplit	./kons.cpp	/^void aufSplit(vector<string> *tokens, const char* const text, const char sep\/*=' '*\/,bool auchleer\/*=1*\/)$/;"	f
aufSplit	./kons.cpp	/^void aufSplit(vector<string> *tokens, const string& text, const char sep\/*=' '*\/,bool auchleer\/*=1*\/)$/;"	f
aufSplit	./kons.cpp	/^void aufSplit(vector<string> *tokens, const string& text, const char* const sep, bool auchleer\/*=1*\/)$/;"	f
aufiSplit	./kons.cpp	/^void aufiSplit(vector<string> *tokens, const string& text, const string& sep,bool nichtmehrfach\/*=1*\/,int obverb\/*=0*\/,int oblog\/*=0*\/,int ohneanfz\/*=0*\/) $/;"	f
aufrufe	./kons.h	/^		ulong aufrufe=0; \/\/ Zahl der bisherigen Programmaufrufe$/;"	m	struct:hcl
ausgab1000	./kons.cpp	/^void perfcl::ausgab1000(const string& stelle)$/;"	f	class:perfcl
ausgeb	./kons.cpp	/^int find3cl::ausgeb()$/;"	f	class:find3cl
ausgeb	./kons.cpp	/^void find2cl::ausgeb()$/;"	f	class:find2cl
ausgeb	./kons.cpp	/^void perfcl::ausgeb(const string& stelle,uchar obdauer)$/;"	f	class:perfcl
ausricht	./configure	/^ausricht() {$/;"	f
auth	./network.h	/^	SoupAuth *auth;$/;"	m	struct:auth_data
auth_data	./network.h	/^struct auth_data {$/;"	s
authenticate	./appobject.h	/^	void (*authenticate)(struct auth_data *auth_data);$/;"	m	struct:_AppObjectClass
autoupd	./kons.h	/^		int autoupd=-1;  \/\/ 1=Programm automatisch updadaten$/;"	m	struct:hcl
av	./kons.h	/^ vector<aScl> av;$/;"	m	struct:absch
azaehlerdt	./kons.h	/^		string azaehlerdt; \/\/ akonfdt+".zaehl"$/;"	m	struct:hcl
bad_rows	./fax.h	/^	gint bad_rows;$/;"	m	struct:fax_status
base_name	./kons.cpp	/^string base_name(const string& path)$/;"	f
bemerk	./kons.h	/^	string bemerk;$/;"	m	struct:paarcl
bemerk	./kons.h	/^    string bemerk;$/;"	m	struct:wpgcl
benutzer	./kons.h	/^		vector<string> benutzer; \/\/ Benutzer aus \/etc\/passwd, bearbeitet durch setzbenutzer(&user)$/;"	m	struct:hcl
binaer	./kons.h	/^enum binaer:uchar {falsch,wahr};$/;"	g
bit_inverse	./isdn-convert.h	/^static inline guchar bit_inverse(guchar chr)$/;"	f
bitrate	./fax.h	/^	gint bitrate;$/;"	m	struct:fax_status
blau	./kons.cpp	/^			*const dblau="\\e[0;34;1;47m", *const blau="\\e[1;34m", *const violett="\\e[0;35m", *const hviolett="\\e[1;35m",$/;"	v
blau	./kons.cpp	/^const char *const drot="", *const rot="", *const schwarz="", *const blau="", *const gelb="", *const tuerkis="", *const hgrau="";$/;"	v
braun	./kons.cpp	/^			*const gruen="\\e[0;32m", *const hgruen="\\e[1;32m", *const braun="\\e[0;33m", *const gelb="\\e[1;33m",$/;"	v
buffer	./faxophone.h	/^	short buffer[RECORDING_BUFSIZE];$/;"	m	struct:record_channel
buffers	./faxophone.h	/^	int buffers;$/;"	m	struct:capi_connection
bytes_received	./fax.h	/^	gint bytes_received;$/;"	m	struct:fax_status
bytes_sent	./fax.h	/^	gint bytes_sent;$/;"	m	struct:fax_status
bytes_total	./fax.h	/^	gint bytes_total;$/;"	m	struct:fax_status
call	./call.h	/^struct call {$/;"	s
call_by_call_entry	./call.h	/^struct call_by_call_entry {$/;"	s
capi_call	./faxophone.c	/^struct capi_connection *capi_call($/;"	f
capi_close	./faxophone.c	/^static int capi_close(void)$/;"	f	file:
capi_confirmation	./faxophone.c	/^static void capi_confirmation(_cmsg capi_message)$/;"	f	file:
capi_connection	./faxophone.h	/^struct capi_connection {$/;"	s
capi_connection_established_cb	./direkt.c	/^static void capi_connection_established_cb(AppObject *object, struct capi_connection *connection, gpointer user_data)$/;"	f	file:
capi_connection_set_type	./faxophone.c	/^static int capi_connection_set_type(struct capi_connection *connection, int type)$/;"	f	file:
capi_connection_terminated_cb	./direkt.c	/^static void capi_connection_terminated_cb(AppObject *object, struct capi_connection *connection, gpointer user_data)$/;"	f	file:
capi_enable_dtmf	./faxophone.c	/^static void capi_enable_dtmf(struct capi_connection *connection)$/;"	f	file:
capi_error	./faxophone.c	/^static void capi_error(long error)$/;"	f	file:
capi_find_ncci	./faxophone.c	/^static struct capi_connection *capi_find_ncci(int ncci)$/;"	f	file:
capi_find_new	./faxophone.c	/^static struct capi_connection *capi_find_new(void)$/;"	f	file:
capi_find_plci	./faxophone.c	/^static struct capi_connection *capi_find_plci(int plci)$/;"	f	file:
capi_get_dtmf_code	./faxophone.c	/^static void capi_get_dtmf_code(struct capi_connection *connection, unsigned char dtmf)$/;"	f	file:
capi_get_free_connection	./faxophone.c	/^struct capi_connection *capi_get_free_connection(void)$/;"	f
capi_get_source_no	./faxophone.c	/^static void capi_get_source_no(_cmsg *cmsg, char number[256])$/;"	f	file:
capi_get_target_no	./faxophone.c	/^static void capi_get_target_no(_cmsg *cmsg, char number[256])$/;"	f	file:
capi_hangup	./faxophone.c	/^void capi_hangup(struct capi_connection *connection)$/;"	f
capi_indication	./faxophone.c	/^static int capi_indication(_cmsg capi_message)$/;"	f	file:
capi_init	./faxophone.c	/^static int capi_init(int controller)$/;"	f	file:
capi_loop	./faxophone.c	/^static gpointer capi_loop(void *user_data)$/;"	f	file:
capi_pickup	./faxophone.c	/^int capi_pickup(struct capi_connection *connection, int type)$/;"	f
capi_profile	./faxophone.h	/^typedef struct capi_profile {$/;"	s
capi_profile	./faxophone.h	/^} capi_profile;$/;"	t	typeref:struct:capi_profile
capi_resp_connection	./faxophone.c	/^static void capi_resp_connection(int plci, unsigned int ignore)$/;"	f	file:
capi_send_display_message	./faxophone.c	/^void capi_send_display_message(struct capi_connection *connection, char *text)$/;"	f
capi_send_dtmf_code	./faxophone.c	/^void capi_send_dtmf_code(struct capi_connection *connection, unsigned char dtmf)$/;"	f
capi_set_free	./faxophone.c	/^static int capi_set_free(struct capi_connection *connection)$/;"	f	file:
capi_thread	./faxophone.c	/^static GThread *capi_thread = NULL;$/;"	v	file:
caseersetze	./kons.cpp	/^string caseersetze(const string& u, const char* const alt, const char* const neu) $/;"	f
caus	./kons.cpp	18;"	d	file:
caus	./kons.h	138;"	d
cgid	./kons.h	/^		gid_t cgid;$/;"	m	struct:cuscl
charersetze	./kons.cpp	/^char* charersetze(char *u, const char alt, const char neu) $/;"	f
chersetze	./kons.cpp	/^void chersetze(string str, string *wsRet, const string& from, const char to) $/;"	f
city	./contact.h	/^	gchar *city;$/;"	m	struct:contact
city	./contact.h	/^	gchar *city;$/;"	m	struct:contact_address
cl	./kons.h	/^		string cl; \/\/ comandline$/;"	m	struct:hcl
clean	./faxophone.h	/^	void (*clean)(struct capi_connection *connection);$/;"	m	struct:capi_connection
clear	./kons.cpp	/^void absch::clear()$/;"	f	class:absch
close	./audio.h	/^	gboolean (*close)(gpointer priv);$/;"	m	struct:audio
cmd	./kons.h	/^    string cmd; \/\/ string fuer command fuer Betriebssystembefehle$/;"	m	struct:hcl
cmeingegeben	./kons.h	/^		uchar cmeingegeben=0; \/\/ cron-Minuten eingegeben$/;"	m	struct:hcl
cmpmem	./kons.cpp	/^long cmpmem( char* feld, const char* search, int len_feld) \/\/\/\/ , int len_search$/;"	f
code	./faxophone.h	/^	void (*code)(struct capi_connection *connection, int code);$/;"	m	struct:session_handlers_st
color	./kons.h	/^  color(WORD attribute):m_color(attribute){};$/;"	f	struct:color
color	./kons.h	/^struct color {$/;"	s
company	./contact.h	/^	gchar *company;$/;"	m	struct:contact
compil	./kons.h	/^ string compil; \/\/ Paketnamen fuer den Compiler$/;"	m	struct:linst_cl
confdcl	./kons.cpp	/^confdcl::confdcl():obgelesen(0),obzuschreib(0)$/;"	f	class:confdcl
confdcl	./kons.cpp	/^confdcl::confdcl(const string& fname, int obverb, const char tz\/*='='*\/):obgelesen(0),obzuschreib(0)$/;"	f	class:confdcl
confdcl	./kons.h	/^struct confdcl $/;"	s
confschreib	./kons.cpp	/^template<typename SCL> int schAcl<SCL>::confschreib(const string& fname,ios_base::openmode modus\/*=ios_base::out*\/,const string& mpfad,$/;"	f	class:schAcl
connect	./net_monitor.h	/^	net_connect_func connect;$/;"	m	struct:net_event
connect_time	./faxophone.h	/^	time_t connect_time;$/;"	m	struct:capi_connection
connected	./faxophone.h	/^	void (*connected)(struct capi_connection *connection);$/;"	m	struct:session_handlers_st
connection	./connection.h	/^struct connection {$/;"	s
connection	./fax.h	/^	struct capi_connection *connection;$/;"	m	struct:fax_status	typeref:struct:fax_status::
connection	./faxophone.h	/^	struct capi_connection connection[CAPI_CONNECTIONS];$/;"	m	struct:session	typeref:struct:session::capi_connection
connection_add_call	./connection.c	/^struct connection *connection_add_call(gint id, gint type, const gchar *local_number, const gchar *remote_number)$/;"	f
connection_code	./fax_phone.c	/^void connection_code(struct capi_connection *connection, gint code)$/;"	f
connection_established	./appobject.h	/^	void (*connection_established)(struct capi_connection *connection);$/;"	m	struct:_AppObjectClass
connection_established	./fax_phone.c	/^void connection_established(struct capi_connection *connection)$/;"	f
connection_established_idle	./fax_phone.c	/^gboolean connection_established_idle(gpointer data)$/;"	f
connection_find_by_id	./connection.c	/^struct connection *connection_find_by_id(gint id)$/;"	f
connection_find_by_number	./connection.c	/^struct connection *connection_find_by_number(const gchar *remote_number)$/;"	f
connection_list	./connection.c	/^static GSList *connection_list = NULL;$/;"	v	file:
connection_notify	./appobject.h	/^	void (*connection_notify)(struct connection *connection);$/;"	m	struct:_AppObjectClass
connection_remove	./connection.c	/^void connection_remove(struct connection *connection)$/;"	f
connection_ring	./fax_phone.c	/^void connection_ring(struct capi_connection *capi_connection)$/;"	f
connection_ring_idle	./fax_phone.c	/^gboolean connection_ring_idle(gpointer data)$/;"	f
connection_set_type	./connection.c	/^void connection_set_type(struct connection *connection, gint type)$/;"	f
connection_status	./appobject.h	/^	void (*connection_status)(gint status, struct capi_connection *connection);$/;"	m	struct:_AppObjectClass
connection_status	./fax_phone.c	/^void connection_status(struct capi_connection *connection, gint status)$/;"	f
connection_terminated	./appobject.h	/^	void (*connection_terminated)(struct capi_connection *connection);$/;"	m	struct:_AppObjectClass
connection_terminated	./fax_phone.c	/^void connection_terminated(struct capi_connection *connection)$/;"	f
connection_terminated_idle	./fax_phone.c	/^gboolean connection_terminated_idle(gpointer data)$/;"	f
contact	./contact.h	/^struct contact {$/;"	s
contact_address	./contact.h	/^struct contact_address {$/;"	s
contact_process	./appobject.h	/^	void (*contact_process)(struct contact *contact);$/;"	m	struct:_AppObjectClass
contacts_changed	./appobject.h	/^	void (*contacts_changed)(void);$/;"	m	struct:_AppObjectClass
controller	./direkt.h	/^		int controller;$/;"	m	class:fbcl
controller	./faxophone.h	/^	unsigned int controller;$/;"	m	struct:capi_connection
convert	./kons.cpp	/^char *ic_cl::convert(string& eing,size_t ab\/*=0*\/) {$/;"	f	class:ic_cl
convert_audio_to_isdn	./isdn-convert.c	/^void convert_audio_to_isdn(struct capi_connection *connection, unsigned char *in_buf, unsigned int in_buf_len, unsigned char *out_buf, unsigned int *out_buf_len, short *rec_buf)$/;"	f
convert_isdn_to_audio	./isdn-convert.c	/^void convert_isdn_to_audio(struct capi_connection *connection, unsigned char *in_buf, unsigned int in_buf_len, unsigned char *out_buf, unsigned int *out_buf_len, short *rec_buf)$/;"	f
country_code	./call.h	/^	gchar *country_code;$/;"	m	struct:call_by_call_entry
cppschreib	./kons.cpp	/^int cppschreib(const string& fname, WPcl *conf, size_t csize)$/;"	f
cpt	./kons.h	/^    char cpt[255];$/;"	m	struct:hcl
cpt	./kons.h	/^    char cpt[MAXHOSTNAMELEN]; $/;"	m	struct:hcl
cptlen	./kons.h	/^    size_t cptlen;$/;"	m	struct:hcl
create_table_buffer	./isdn-convert.c	/^void create_table_buffer(void)$/;"	f
cred	./tr64.h	/^		string cred;$/;"	m	class:tr64cl
crongeprueft	./kons.h	/^		uchar crongeprueft=0;$/;"	m	struct:hcl
cronminut	./kons.h	/^    string cronminut; \/\/ Minuten fuer crontab; 0 = kein Crontab-Eintrag$/;"	m	struct:hcl
cronzuplanen	./kons.h	/^		uchar cronzuplanen;$/;"	m	struct:hcl
ctx	./direkt.c	/^GMainContext *ctx;$/;"	v
cuid	./kons.h	/^		uid_t cuid;$/;"	m	struct:cuscl
cus	./kons.cpp	/^cuscl cus; \/\/ globales Objekt$/;"	v
cuscl	./kons.cpp	/^cuscl::cuscl()$/;"	f	class:cuscl
cuscl	./kons.h	/^struct cuscl$/;"	s
cusstr	./kons.h	/^		string cusstr;$/;"	m	struct:cuscl
daemon_reload	./kons.cpp	/^void servc::daemon_reload(int obverb\/*=0*\/, int oblog\/*=0*\/)$/;"	f	class:servc
data	./faxophone.h	/^	void (*data)(struct capi_connection *connection, _cmsg capi_message);$/;"	m	struct:capi_connection
date_time	./call.h	/^	gchar *date_time;$/;"	m	struct:call
datei	./fbfax.h	/^		string datei; \/\/ zu faxende (in Spool zu stellende) Datei$/;"	m	class:hhcl
dateivgl	./kons.cpp	/^int dateivgl(const string& d1, const string& d2,uchar obzeit\/*=0*\/)$/;"	f
dblau	./kons.cpp	/^			*const dblau="\\e[0;34;1;47m", *const blau="\\e[1;34m", *const violett="\\e[0;35m", *const hviolett="\\e[1;35m",$/;"	v
dcpt	./kons.h	/^    DWORD dcpt;$/;"	m	struct:hcl
deb	./kons.h	/^enum lsysen:uchar {usys,sus,deb,fed};$/;"	e	enum:lsysen
debug	./direkt.c	/^static gboolean debug = FALSE;$/;"	v	file:
deinit	./audio.h	/^	gboolean (*deinit)(void);$/;"	m	struct:audio
dent	./kons.h	/^		struct dirent *dent;$/;"	m	struct:find2cl	typeref:struct:find2cl::
deutsch	./kons.h	/^enum Sprache {deutsch,englisch,SprachZahl};$/;"	e	enum:Sprache
dev	./kons.h	/^ string dev; \/\/ Anhaengsel fuer die development-Versionen ("-dev" oder "-devel")$/;"	m	struct:linst_cl
dgrau	./kons.cpp	/^const char *const schwarz="\\e[0m", *const dgrau="\\e[1;30m", *const drot="\\e[0;31m", *const rot="\\e[1;31m",$/;"	v
dir	./kons.cpp	/^const char *const dir = "dir ";$/;"	v
dir	./kons.cpp	/^const char *const dir = "ls -l ";$/;"	v
dir	./kons.h	/^		DIR *dir;$/;"	m	struct:find2cl
dir_name	./kons.cpp	/^string dir_name(const string& path)$/;"	f
disconnect	./net_monitor.h	/^	net_disconnect_func disconnect;$/;"	m	struct:net_event
disconnected	./faxophone.h	/^	void (*disconnected)(struct capi_connection *connection);$/;"	m	struct:session_handlers_st
distroenum	./kons.h	/^enum distroenum{unbek=-1,Mint,Ubuntu,Debian,Suse,Fedora,Fedoraalt,Mageia,Manjaro};$/;"	g
dmain	./direkt.c	/^int dmain(int argc, string *argv,fstream *vwdtph, const string usr,const string pwd,const string host,int obverb)$/;"	f
dnf	./kons.h	/^enum instprog {keinp,zypper,apt,dnf,yum,urp,pac};$/;"	e	enum:instprog
doanfg	./kons.cpp	/^void doanfg(const string& datei, const string& inhalt, const string& comment)$/;"	f
dodovi	./kons.cpp	/^void hcl::dodovi(const svec d1,const svec d2)$/;"	f	class:hcl
dofind	./kons.cpp	/^int find3cl::dofind()$/;"	f	class:find3cl
doggfinst	./kons.cpp	/^int linst_cl::doggfinst(const string& prog,int obverb,int oblog,uchar ohneabh\/*=0*\/)$/;"	f	class:linst_cl
doinst	./kons.cpp	/^int linst_cl::doinst(const string& prog,int obverb\/*=0*\/,int oblog\/*=0*\/,const string& fallsnichtda\/*=string()*\/,uchar ohneabh\/*=0*\/)$/;"	f	class:linst_cl
done	./fax.h	/^	gboolean done;$/;"	m	struct:fax_status
douninst	./kons.cpp	/^int linst_cl::douninst(const string& prog,int obverb\/*=0*\/,int oblog\/*=0*\/,uchar obyes\/*=1*\/) $/;"	f	class:linst_cl
dovi	./kons.cpp	/^void hcl::dovi()$/;"	f	class:hcl
drot	./kons.cpp	/^const char *const drot="", *const rot="", *const schwarz="", *const blau="", *const gelb="", *const tuerkis="", *const hgrau="";$/;"	v
drot	./kons.cpp	/^const char *const schwarz="\\e[0m", *const dgrau="\\e[1;30m", *const drot="\\e[0;31m", *const rot="\\e[1;31m",$/;"	v
dst	./kons.h	/^    struct stat dst={0};$/;"	m	struct:elem2	typeref:struct:elem2::stat
dummy	./appobject.c	/^	gchar dummy;$/;"	m	struct:_AppObjectPrivate	file:
duration	./call.h	/^	gchar *duration;$/;"	m	struct:call
early_b3	./faxophone.h	/^	int early_b3;$/;"	m	struct:capi_connection
ecm	./fax.h	/^	gchar ecm;$/;"	m	struct:fax_status
edit	./kons.h	/^		static const string edit;$/;"	m	struct:hcl
eingefuegt	./kons.h	/^		int eingefuegt, verzneu;$/;"	m	struct:find2cl
einricht	./configure	/^einricht() {$/;"	f
eintrinit	./kons.cpp	/^template <> void schAcl<WPcl>::eintrinit()$/;"	f	class:schAcl
eintrinit	./kons.cpp	/^template <> void schAcl<optcl>::eintrinit()$/;"	f	class:schAcl
el2set	./kons.h	/^typedef map<elem2,ull> el2set;$/;"	t
el2set	./kons.h	/^typedef set<elem2> el2set;$/;"	t
elem2	./kons.cpp	/^elem2::elem2(const string& mutter,const string& name) $/;"	f	class:elem2
elem2	./kons.h	/^    elem2(){};$/;"	f	struct:elem2
elem2	./kons.h	/^struct elem2$/;"	s
elem3	./kons.h	/^    elem3(string pfad, const struct stat *sbp, int& tflag, const struct FTW *ftwp, string lnk,const struct stat& lst):$/;"	f	struct:elem3
elem3	./kons.h	/^struct elem3$/;"	s
elemzahl	./kons.h	499;"	d
elemzahlT	./kons.h	/^template<typename T> size_t elemzahlT(T& v){return sizeof(v)\/sizeof(*v);}$/;"	f
emit_authenticate	./appobject-emit.c	/^void emit_authenticate(struct auth_data *auth_data)$/;"	f
emit_connection_established	./appobject-emit.c	/^void emit_connection_established(struct capi_connection *connection)$/;"	f
emit_connection_notify	./appobject-emit.c	/^void emit_connection_notify(struct connection *connection)$/;"	f
emit_connection_status	./appobject-emit.c	/^void emit_connection_status(gint status, struct capi_connection *connection)$/;"	f
emit_connection_terminated	./appobject-emit.c	/^void emit_connection_terminated(struct capi_connection *connection)$/;"	f
emit_contact_process	./appobject-emit.c	/^void emit_contact_process(struct contact *contact)$/;"	f
emit_contacts_changed	./appobject-emit.c	/^void emit_contacts_changed(void)$/;"	f
emit_fax_process	./appobject-emit.c	/^void emit_fax_process(const gchar *filename)$/;"	f
emit_journal_loaded	./appobject-emit.c	/^void emit_journal_loaded(GSList *journal)$/;"	f
emit_message	./appobject-emit.c	/^void emit_message(gchar *title, gchar *message)$/;"	f
enableggf	./kons.cpp	/^int servc::enableggf(int obverb\/*=0*\/,int oblog\/*=0*\/)$/;"	f	class:servc
ename	./kons.h	/^    string sname,ename; \/\/ Dienstname, Exename$/;"	m	struct:servc
encoding	./fax.h	/^	gint encoding;$/;"	m	struct:fax_status
englisch	./kons.h	/^enum Sprache {deutsch,englisch,SprachZahl};$/;"	e	enum:Sprache
eprog	./kons.h	/^ string eprog; \/\/ ersetztes Programm$/;"	m	struct:linst_cl
erg	./kons.h	/^    set<elem3> erg;$/;"	m	struct:find3cl
ergcont	./kons.h	/^		char ergcont[reserve],$/;"	m	struct:ic_cl
ergdyn	./kons.h	/^		*ergdyn=0;$/;"	m	struct:ic_cl
ergebnis	./kons.h	/^		char *ergebnis;$/;"	m	struct:ic_cl
ergp	./kons.cpp	/^set<elem3> *find3cl::ergp;$/;"	m	class:find3cl	file:
ergp	./kons.h	/^		el2set *ergp=0;$/;"	m	struct:find2cl
ergp	./kons.h	/^    static set<elem3> *ergp;$/;"	m	struct:find3cl
erkl	./kons.h	/^		stringstream erkl; \/\/ Erklärung für die Hilfe$/;"	m	struct:hcl
errmsgcl	./kons.h	/^		errmsgcl(int errnr,const string& msg):errnr(errnr),msg(msg){}$/;"	f	struct:errmsgcl
errmsgcl	./kons.h	/^struct errmsgcl$/;"	s
errnr	./kons.h	/^		int errnr;$/;"	m	struct:errmsgcl
error_code	./fax.h	/^	gint error_code;$/;"	m	struct:fax_status
ers	./kons.cpp	/^char ers(const char roh)$/;"	f
ersetzAlle	./kons.cpp	/^void ersetzAlle(string *quelle, const char* const alt, const char* const neu) $/;"	f
ersetzAlle	./kons.cpp	/^void ersetzAlle(string *quelle, const string& alt, const string& neu) $/;"	f
ersetzAlle	./kons.cpp	/^void ersetzAlle(string& quelle, const string& alt, const string& neu) $/;"	f
ersetzAllezu	./kons.cpp	/^string ersetzAllezu(const char *const quelle, const char* const alt, const char* const neu) $/;"	f
ersetzAllezu	./kons.cpp	/^string ersetzAllezu(const string& quelle, const string& alt, const string& neu) $/;"	f
ersetzAllezu	./kons.cpp	/^string ersetzAllezu(string *quelle, const char* const alt, const char* const neu) $/;"	f
ersetze	./kons.cpp	/^string ersetze(const char *const u, const char *const alt, const char *const neu) $/;"	f
ersetzefuerdatei	./kons.cpp	/^string ersetzefuerdatei(const string& u) $/;"	f
ersetzeprog	./kons.cpp	/^const string linst_cl::ersetzeprog(const string& prog) const$/;"	f	class:linst_cl
exitt	./kons.h	139;"	d
exportvars	./configure	/^exportvars() {$/;"	f
fLog	./kons.cpp	/^int fLog(const string& text, const short screen\/*=1*\/, const short file\/*=1*\/, const bool oberr\/*=0*\/, const short klobverb\/*=0*\/)$/;"	f
falsch	./kons.h	/^enum binaer:uchar {falsch,wahr};$/;"	e	enum:binaer
fax_clean	./fax.c	/^void fax_clean(struct capi_connection *connection)$/;"	f
fax_connection_status_cb	./direkt.c	/^void fax_connection_status_cb(AppObject *object, gint status, struct capi_connection *connection, gpointer user_data)$/;"	f
fax_phase	./fax.h	/^enum fax_phase {$/;"	g
fax_process	./appobject.h	/^	void (*fax_process)(const gchar *filename);$/;"	m	struct:_AppObjectClass
fax_receive	./fax.c	/^gint fax_receive(struct capi_connection *connection, const gchar *tiff_file, gint modem, gint ecm, const gchar *src_no, gchar *trg_no, gint manual_hookup)$/;"	f
fax_send	./fax.c	/^struct capi_connection *fax_send(gchar *tiff_file, gint modem, gint ecm, gint controller, gint cip, const gchar *src_no, const gchar *trg_no, const gchar *lsi, const gchar *local_header_info, gint call_anonymous)$/;"	f
fax_set_log_level	./fax.c	/^void fax_set_log_level(gint level)$/;"	f
fax_spandsp_workaround	./fax.c	/^void fax_spandsp_workaround(struct capi_connection *connection)$/;"	f
fax_state	./fax.h	/^	fax_state_t *fax_state;$/;"	m	struct:fax_status
fax_status	./fax.h	/^struct fax_status {$/;"	s
fax_transfer	./fax.c	/^void fax_transfer(struct capi_connection *connection, _cmsg capi_message)$/;"	f
faxophone_close	./faxophone.c	/^int faxophone_close(int force)$/;"	f
faxophone_connect_hier	./direkt.c	/^gboolean fbcl::faxophone_connect_hier()$/;"	f	class:fbcl
faxophone_get_session	./faxophone.c	/^struct session *faxophone_get_session(void)$/;"	f
faxophone_init	./faxophone.c	/^struct session *faxophone_init(struct session_handlers_st *handlers, const char *host, gint controller)$/;"	f
faxophone_quit	./faxophone.c	/^static unsigned char faxophone_quit = 1;$/;"	v	file:
faxophone_reconnect	./faxophone.c	/^static void faxophone_reconnect(struct session *phsession)$/;"	f	file:
fbcl	./direkt.c	/^fbcl::fbcl(const string usr,const string pwd,const string host)$/;"	f	class:fbcl
fbcl	./direkt.h	/^class fbcl$/;"	c
fed	./kons.h	/^enum lsysen:uchar {usys,sus,deb,fed};$/;"	e	enum:lsysen
fehler	./kons.h	/^    int fehler=0; \/\/ Exit-Code der Exe-Datei$/;"	m	struct:servc
fertige	./kons.h	/^    set<wele> wurz,fertige;$/;"	m	struct:find3cl
file	./faxophone.h	/^	SNDFILE *file;$/;"	m	struct:recorder
file_load	./file.c	/^gchar *file_load(gchar *name, gsize *size)$/;"	f
file_name	./faxophone.h	/^	char *file_name;$/;"	m	struct:recorder
file_save	./file.c	/^void file_save(gchar *name, const gchar *data, gsize len)$/;"	f
fileno	./kons.h	50;"	d
find2cl	./kons.cpp	/^find2cl::find2cl(int _obverb\/*=0*\/,int _oblog\/*=0*\/,find2cl *stamm\/*=0*\/):obverb(_obverb),oblog(_oblog)$/;"	f	class:find2cl
find2cl	./kons.h	/^struct find2cl: elem2$/;"	s
find3cl	./kons.cpp	/^find3cl::find3cl(int _obverb\/*=0*\/,int _oblog\/*=0*\/):obverb(_obverb),oblog(_oblog)$/;"	f	class:find3cl
find3cl	./kons.h	/^struct find3cl$/;"	s
finde	./kons.cpp	/^int find2cl::finde(svec *wovp,const string& muster\/*=string()*\/,const long tiefe\/*=-1*\/,int typbit\/*=B_Alle*\/,int folge\/*=Fol_Dat*\/,$/;"	f	class:find2cl
finde	./kons.cpp	/^int find3cl::finde(svec *wovp,const string& muster\/*=string()*\/,long tiefe\/*=-1*\/,$/;"	f	class:find3cl
findfile	./kons.cpp	/^void findfile(svec *qrueckp,uchar findv,int obverb\/*=0*\/,int oblog\/*=0*\/,uchar anteil\/*=0*\/,$/;"	f
flags	./kons.h	/^    int flags = 0;$/;"	m	struct:find3cl
fmt	./kons.h	/^		const char* const fmt;$/;"	m	struct:ztacl
fname	./kons.h	/^	string fname; \/\/ Dateiname$/;"	m	struct:confdcl
fnhcliztyp	./kons.h	/^typedef int (hcl::*fnhcliztyp)();$/;"	t
fnhclztyp	./kons.h	/^typedef void (hcl::*fnhclztyp)();$/;"	t
folge	./kons.h	/^    int folge=0;$/;"	m	struct:find3cl
folgep	./kons.cpp	/^int *find3cl::folgep;$/;"	m	class:find3cl	file:
folgep	./kons.h	/^    static int *folgep;$/;"	m	struct:find3cl
fragurl	./tr64.cpp	/^int tr64cl::fragurl(const std::string zurl, const std::string zservT, const std::string action, std::string* bufp,const vector<string>* iname\/*=0*\/,const vector<string>* ival\/*=0*\/)$/;"	f	class:tr64cl
free_auth_data	./network.c	/^static void free_auth_data(struct auth_data *auth_data)$/;"	f	file:
frisch	./kons.cpp	/^template<typename SCL> void schAcl<SCL>::frisch()$/;"	f	class:schAcl
ftw	./kons.h	/^    const struct FTW ftw={0};$/;"	m	struct:elem3	typeref:struct:elem3::FTW
fuersamba	./kons.cpp	/^void fuersamba(string& roh)$/;"	f
fui0	./kons.cpp	/^int hcl::fui0(){return 0;}; int hcl::fui1(){return 0;}; int hcl::fui2(){return 0;}; int hcl::fui3(){return 0;}; int hcl::fui4(){return 0;}; int hcl::fui5(){return 0;}; int hcl::fui6(){return 0;}; int hcl::fui7(){return 0;}; int hcl::fui8(){return 0;}; int hcl::fui9(){return 0;}; int hcl::fui10(){return 0;};$/;"	f	class:hcl
fui1	./kons.cpp	/^int hcl::fui0(){return 0;}; int hcl::fui1(){return 0;}; int hcl::fui2(){return 0;}; int hcl::fui3(){return 0;}; int hcl::fui4(){return 0;}; int hcl::fui5(){return 0;}; int hcl::fui6(){return 0;}; int hcl::fui7(){return 0;}; int hcl::fui8(){return 0;}; int hcl::fui9(){return 0;}; int hcl::fui10(){return 0;};$/;"	f	class:hcl
fui10	./kons.cpp	/^int hcl::fui0(){return 0;}; int hcl::fui1(){return 0;}; int hcl::fui2(){return 0;}; int hcl::fui3(){return 0;}; int hcl::fui4(){return 0;}; int hcl::fui5(){return 0;}; int hcl::fui6(){return 0;}; int hcl::fui7(){return 0;}; int hcl::fui8(){return 0;}; int hcl::fui9(){return 0;}; int hcl::fui10(){return 0;};$/;"	f	class:hcl
fui2	./kons.cpp	/^int hcl::fui0(){return 0;}; int hcl::fui1(){return 0;}; int hcl::fui2(){return 0;}; int hcl::fui3(){return 0;}; int hcl::fui4(){return 0;}; int hcl::fui5(){return 0;}; int hcl::fui6(){return 0;}; int hcl::fui7(){return 0;}; int hcl::fui8(){return 0;}; int hcl::fui9(){return 0;}; int hcl::fui10(){return 0;};$/;"	f	class:hcl
fui3	./kons.cpp	/^int hcl::fui0(){return 0;}; int hcl::fui1(){return 0;}; int hcl::fui2(){return 0;}; int hcl::fui3(){return 0;}; int hcl::fui4(){return 0;}; int hcl::fui5(){return 0;}; int hcl::fui6(){return 0;}; int hcl::fui7(){return 0;}; int hcl::fui8(){return 0;}; int hcl::fui9(){return 0;}; int hcl::fui10(){return 0;};$/;"	f	class:hcl
fui4	./kons.cpp	/^int hcl::fui0(){return 0;}; int hcl::fui1(){return 0;}; int hcl::fui2(){return 0;}; int hcl::fui3(){return 0;}; int hcl::fui4(){return 0;}; int hcl::fui5(){return 0;}; int hcl::fui6(){return 0;}; int hcl::fui7(){return 0;}; int hcl::fui8(){return 0;}; int hcl::fui9(){return 0;}; int hcl::fui10(){return 0;};$/;"	f	class:hcl
fui5	./kons.cpp	/^int hcl::fui0(){return 0;}; int hcl::fui1(){return 0;}; int hcl::fui2(){return 0;}; int hcl::fui3(){return 0;}; int hcl::fui4(){return 0;}; int hcl::fui5(){return 0;}; int hcl::fui6(){return 0;}; int hcl::fui7(){return 0;}; int hcl::fui8(){return 0;}; int hcl::fui9(){return 0;}; int hcl::fui10(){return 0;};$/;"	f	class:hcl
fui6	./kons.cpp	/^int hcl::fui0(){return 0;}; int hcl::fui1(){return 0;}; int hcl::fui2(){return 0;}; int hcl::fui3(){return 0;}; int hcl::fui4(){return 0;}; int hcl::fui5(){return 0;}; int hcl::fui6(){return 0;}; int hcl::fui7(){return 0;}; int hcl::fui8(){return 0;}; int hcl::fui9(){return 0;}; int hcl::fui10(){return 0;};$/;"	f	class:hcl
fui7	./kons.cpp	/^int hcl::fui0(){return 0;}; int hcl::fui1(){return 0;}; int hcl::fui2(){return 0;}; int hcl::fui3(){return 0;}; int hcl::fui4(){return 0;}; int hcl::fui5(){return 0;}; int hcl::fui6(){return 0;}; int hcl::fui7(){return 0;}; int hcl::fui8(){return 0;}; int hcl::fui9(){return 0;}; int hcl::fui10(){return 0;};$/;"	f	class:hcl
fui8	./kons.cpp	/^int hcl::fui0(){return 0;}; int hcl::fui1(){return 0;}; int hcl::fui2(){return 0;}; int hcl::fui3(){return 0;}; int hcl::fui4(){return 0;}; int hcl::fui5(){return 0;}; int hcl::fui6(){return 0;}; int hcl::fui7(){return 0;}; int hcl::fui8(){return 0;}; int hcl::fui9(){return 0;}; int hcl::fui10(){return 0;};$/;"	f	class:hcl
fui9	./kons.cpp	/^int hcl::fui0(){return 0;}; int hcl::fui1(){return 0;}; int hcl::fui2(){return 0;}; int hcl::fui3(){return 0;}; int hcl::fui4(){return 0;}; int hcl::fui5(){return 0;}; int hcl::fui6(){return 0;}; int hcl::fui7(){return 0;}; int hcl::fui8(){return 0;}; int hcl::fui9(){return 0;}; int hcl::fui10(){return 0;};$/;"	f	class:hcl
fuv0	./kons.cpp	/^void hcl::fuv0(){}; void hcl::fuv1(){}; void hcl::fuv2(){}; void hcl::fuv3(){}; void hcl::fuv4(){}; void hcl::fuv5(){}; void hcl::fuv6(){}; void hcl::fuv7(){}; void hcl::fuv8(){}; void hcl::fuv9(){}; void hcl::fuv10(){};$/;"	f	class:hcl
fuv1	./kons.cpp	/^void hcl::fuv0(){}; void hcl::fuv1(){}; void hcl::fuv2(){}; void hcl::fuv3(){}; void hcl::fuv4(){}; void hcl::fuv5(){}; void hcl::fuv6(){}; void hcl::fuv7(){}; void hcl::fuv8(){}; void hcl::fuv9(){}; void hcl::fuv10(){};$/;"	f	class:hcl
fuv10	./kons.cpp	/^void hcl::fuv0(){}; void hcl::fuv1(){}; void hcl::fuv2(){}; void hcl::fuv3(){}; void hcl::fuv4(){}; void hcl::fuv5(){}; void hcl::fuv6(){}; void hcl::fuv7(){}; void hcl::fuv8(){}; void hcl::fuv9(){}; void hcl::fuv10(){};$/;"	f	class:hcl
fuv2	./kons.cpp	/^void hcl::fuv0(){}; void hcl::fuv1(){}; void hcl::fuv2(){}; void hcl::fuv3(){}; void hcl::fuv4(){}; void hcl::fuv5(){}; void hcl::fuv6(){}; void hcl::fuv7(){}; void hcl::fuv8(){}; void hcl::fuv9(){}; void hcl::fuv10(){};$/;"	f	class:hcl
fuv3	./kons.cpp	/^void hcl::fuv0(){}; void hcl::fuv1(){}; void hcl::fuv2(){}; void hcl::fuv3(){}; void hcl::fuv4(){}; void hcl::fuv5(){}; void hcl::fuv6(){}; void hcl::fuv7(){}; void hcl::fuv8(){}; void hcl::fuv9(){}; void hcl::fuv10(){};$/;"	f	class:hcl
fuv4	./kons.cpp	/^void hcl::fuv0(){}; void hcl::fuv1(){}; void hcl::fuv2(){}; void hcl::fuv3(){}; void hcl::fuv4(){}; void hcl::fuv5(){}; void hcl::fuv6(){}; void hcl::fuv7(){}; void hcl::fuv8(){}; void hcl::fuv9(){}; void hcl::fuv10(){};$/;"	f	class:hcl
fuv5	./kons.cpp	/^void hcl::fuv0(){}; void hcl::fuv1(){}; void hcl::fuv2(){}; void hcl::fuv3(){}; void hcl::fuv4(){}; void hcl::fuv5(){}; void hcl::fuv6(){}; void hcl::fuv7(){}; void hcl::fuv8(){}; void hcl::fuv9(){}; void hcl::fuv10(){};$/;"	f	class:hcl
fuv6	./kons.cpp	/^void hcl::fuv0(){}; void hcl::fuv1(){}; void hcl::fuv2(){}; void hcl::fuv3(){}; void hcl::fuv4(){}; void hcl::fuv5(){}; void hcl::fuv6(){}; void hcl::fuv7(){}; void hcl::fuv8(){}; void hcl::fuv9(){}; void hcl::fuv10(){};$/;"	f	class:hcl
fuv7	./kons.cpp	/^void hcl::fuv0(){}; void hcl::fuv1(){}; void hcl::fuv2(){}; void hcl::fuv3(){}; void hcl::fuv4(){}; void hcl::fuv5(){}; void hcl::fuv6(){}; void hcl::fuv7(){}; void hcl::fuv8(){}; void hcl::fuv9(){}; void hcl::fuv10(){};$/;"	f	class:hcl
fuv8	./kons.cpp	/^void hcl::fuv0(){}; void hcl::fuv1(){}; void hcl::fuv2(){}; void hcl::fuv3(){}; void hcl::fuv4(){}; void hcl::fuv5(){}; void hcl::fuv6(){}; void hcl::fuv7(){}; void hcl::fuv8(){}; void hcl::fuv9(){}; void hcl::fuv10(){};$/;"	f	class:hcl
fuv9	./kons.cpp	/^void hcl::fuv0(){}; void hcl::fuv1(){}; void hcl::fuv2(){}; void hcl::fuv3(){}; void hcl::fuv4(){}; void hcl::fuv5(){}; void hcl::fuv6(){}; void hcl::fuv7(){}; void hcl::fuv8(){}; void hcl::fuv9(){}; void hcl::fuv10(){};$/;"	f	class:hcl
g_debug	./connection.c	25;"	d	file:
g_debug	./connection.c	26;"	d	file:
g_debug	./direkt.c	30;"	d	file:
g_debug	./direkt.c	31;"	d	file:
g_debug	./fax.c	33;"	d	file:
g_debug	./fax.c	34;"	d	file:
g_debug	./fax_phone.c	43;"	d	file:
g_debug	./fax_phone.c	44;"	d	file:
g_debug	./faxophone.c	37;"	d	file:
g_debug	./faxophone.c	38;"	d	file:
g_debug	./logging.c	26;"	d	file:
g_debug	./logging.c	27;"	d	file:
g_debug	./net_monitor.c	24;"	d	file:
g_debug	./net_monitor.c	25;"	d	file:
g_debug	./network.c	26;"	d	file:
g_debug	./network.c	27;"	d	file:
g_debug	./phone.c	33;"	d	file:
g_debug	./phone.c	34;"	d	file:
g_debug	./routermanager.c	38;"	d	file:
g_debug	./routermanager.c	39;"	d	file:
g_idle_add_con	./fax_phone.c	/^g_idle_add_con (GSourceFunc    function,$/;"	f
g_idle_add_full_con	./fax_phone.c	/^g_idle_add_full_con (gint           priority,$/;"	f
g_marshal_value_peek_pointer	./appobject.c	42;"	d	file:
gelb	./kons.cpp	/^			*const gruen="\\e[0;32m", *const hgruen="\\e[1;32m", *const braun="\\e[0;33m", *const gelb="\\e[1;33m",$/;"	v
gelb	./kons.cpp	/^const char *const drot="", *const rot="", *const schwarz="", *const blau="", *const gelb="", *const tuerkis="", *const hgrau="";$/;"	v
gen	./kons.cpp	/^const boost::locale::generator gen;$/;"	v
getIPR	./configure	/^getIPR() {$/;"	f
getOS	./configure	/^getOS() {$/;"	f
get_capi_profile	./faxophone.c	/^static int get_capi_profile(unsigned controller, struct capi_profile *host)$/;"	f	file:
get_devices	./audio.h	/^	GSList *(*get_devices)(void);$/;"	m	struct:audio
get_line_level_in	./isdn-convert.c	/^double get_line_level_in(struct capi_connection *connection)$/;"	f
get_line_level_out	./isdn-convert.c	/^double get_line_level_out(struct capi_connection *connection)$/;"	f
get_tiff_total_pages	./fax.c	/^static int get_tiff_total_pages(const char *file)$/;"	f	file:
getcols	./kons.cpp	/^int getcols() $/;"	f
gethome	./kons.cpp	/^string gethome()$/;"	f
getlib64	./kons.cpp	/^string& lsyscl::getlib64(int obverb\/*=0*\/,int oblog\/*=0*\/)$/;"	f	class:lsyscl
getmutex	./kons.cpp	/^pthread_mutex_t printf_mutex, getmutex, timemutex;$/;"	v
getstammext	./kons.cpp	/^void getstammext(const string *const ganz, string *stamm, string *exten) $/;"	f
getsys	./kons.cpp	/^lsysen lsyscl::getsys(int obverb\/*=0*\/,int oblog\/*=0*\/)$/;"	f	class:lsyscl
gfvz	./fbfax.h	/^		string gfvz; \/\/ gefaxt-Verzeichnis (Fertige)$/;"	m	class:hhcl
gibaus	./kons.cpp	/^template<typename SCL> void schAcl<SCL>::gibaus(const int nr\/*=0*\/)$/;"	f	class:schAcl
gibomapaus	./kons.cpp	/^template<typename SCL> void schAcl<SCL>::gibomapaus()$/;"	f	class:schAcl
gitpull	./kons.cpp	/^void hcl::gitpull(const string& DPROG)$/;"	f	class:hcl
goptions	./faxophone.h	/^	uint32_t goptions;$/;"	m	struct:capi_profile
grenze	./kons.h	/^		static const size_t grenze=500, $/;"	m	struct:ic_cl
groupdt	./kons.h	/^		static const string passwddt, groupdt, sudoersdt;$/;"	m	struct:hcl
gruen	./kons.cpp	/^			*const gruen="\\e[0;32m", *const hgruen="\\e[1;32m", *const braun="\\e[0;33m", *const gelb="\\e[1;33m",$/;"	v
gtrim	./kons.h	/^inline std::string *gtrim(std::string *str) {$/;"	f	class:std
hLog	./kons.cpp	/^int hcl::hLog(const string& text,const bool oberr\/*=0*\/,const short klobverb\/*=0*\/) const$/;"	f	class:hcl
handlers	./faxophone.h	/^	struct session_handlers_st *handlers;$/;"	m	struct:session	typeref:struct:session::
hccd	./kons.h	/^		confdcl hccd;$/;"	m	struct:hcl
hcl	./kons.cpp	/^hcl::hcl(const int argc, const char *const *const argv,const char* const DPROG,const uchar mitcron,const uchar parstreng\/*=1*\/):DPROG(DPROG),mitcron(mitcron),parstreng(parstreng)$/;"	f	class:hcl
hcl	./kons.h	/^struct hcl$/;"	s
header	./fax.h	/^	gchar header[64];$/;"	m	struct:fax_status
hgrau	./kons.cpp	/^      *const tuerkis="\\e[0;36m", *const htuerkis="\\e[1;36m", *const hgrau="\\e[0;37m", *const weiss="\\e[1;37m", *const umgek="\\e[7m";$/;"	v
hgrau	./kons.cpp	/^const char *const drot="", *const rot="", *const schwarz="", *const blau="", *const gelb="", *const tuerkis="", *const hgrau="";$/;"	v
hgruen	./kons.cpp	/^			*const gruen="\\e[0;32m", *const hgruen="\\e[1;32m", *const braun="\\e[0;33m", *const gelb="\\e[1;33m",$/;"	v
hhcl	./fbfax.cpp	/^hhcl::hhcl(const int argc, const char *const *const argv):hcl(argc,argv,DPROG,\/*mitcron*\/1,\/*parstreng*\/0) \/\/α$/;"	f	class:hhcl
hhcl	./fbfax.h	/^class hhcl:public hcl$/;"	c
hilfezeile	./kons.cpp	/^void optcl::hilfezeile(Sprache lg)$/;"	f	class:optcl
holbefz0	./kons.cpp	/^void hcl::holbefz0(const int argc, const char *const *const argv)$/;"	f	class:hcl
hold	./faxophone.h	/^	int hold;$/;"	m	struct:capi_connection
holraus	./tr64.cpp	/^size_t holraus(const std::string xml,std::string item,std::string *ergp,size_t anf\/*=0*\/)$/;"	f
holsystemsprache	./kons.cpp	/^string holsystemsprache(int obverb\/*=0*\/)$/;"	f
holtif	./fbfax.cpp	/^int hhcl::holtif(const string& datei,ulong *seitenp,struct tm *tmp,struct stat *elogp, $/;"	f	class:hhcl
holurl	./tr64.cpp	/^int holurl(const std::string url, std::string* bufp)$/;"	f
holvomnetz	./kons.cpp	/^int hcl::holvomnetz(const string& datei,const string& vors\/*=defvors*\/,const string& nachs\/*=defnachs*\/)$/;"	f	class:hcl
host	./direkt.h	/^    const std::string host;$/;"	m	class:fbcl
host	./fbfax.h	/^		string host;$/;"	m	class:hhcl
htuerkis	./kons.cpp	/^      *const tuerkis="\\e[0;36m", *const htuerkis="\\e[1;36m", *const hgrau="\\e[0;37m", *const weiss="\\e[1;37m", *const umgek="\\e[7m";$/;"	v
hviolett	./kons.cpp	/^			*const dblau="\\e[0;34;1;47m", *const blau="\\e[1;34m", *const violett="\\e[0;35m", *const hviolett="\\e[1;35m",$/;"	v
ic_cl	./kons.cpp	/^ic_cl::ic_cl(const char* nach, const char* von) $/;"	f	class:ic_cl
ic_cl	./kons.h	/^struct ic_cl $/;"	s
ict	./kons.h	/^		iconv_t ict;$/;"	m	struct:ic_cl
id	./connection.h	/^	guint id;$/;"	m	struct:connection
id	./faxophone.c	/^static unsigned int id = 0;$/;"	v	file:
id	./faxophone.h	/^	unsigned int id;$/;"	m	struct:capi_connection
ident	./fax.h	/^	gchar ident[64];$/;"	m	struct:fax_status
image	./contact.h	/^	gpointer image;$/;"	m	struct:contact
image_len	./contact.h	/^	gsize image_len;$/;"	m	struct:contact
image_uri	./contact.h	/^	gchar *image_uri;$/;"	m	struct:contact
init	./audio.h	/^	gboolean (*init)(guchar channels, gushort rate, guchar bits);$/;"	m	struct:audio
init	./kons.cpp	/^void elem2::init(const string& vmutter, const string& name) {$/;"	f	class:elem2
init	./kons.cpp	/^void find2cl::init(const string& mutter, const string& name, regex_t *reg, const int folge,const long maxdepth, const int& typbit,$/;"	f	class:find2cl
init	./routermanager.c	/^gboolean rmcl::init(GError **error)$/;"	f	class:rmcl
init_data	./faxophone.h	/^	void (*init_data)(struct capi_connection *connection);$/;"	m	struct:capi_connection
input_thread_state	./faxophone.h	/^	int input_thread_state;$/;"	m	struct:session
instp	./kons.h	/^ string instp; \/\/ Befehl zum Installieren ueber das Installationnssystem$/;"	m	struct:linst_cl
instprog	./kons.h	/^enum instprog {keinp,zypper,apt,dnf,yum,urp,pac};$/;"	g
instyp	./kons.h	/^ string instyp; \/\/ Befehl zum Installieren ueber das Installationnssystem mit automatischem yes auf Rueckfragen$/;"	m	struct:linst_cl
internal_audio	./audio.c	/^static struct audio *internal_audio = NULL;$/;"	v	typeref:struct:	file:
internal_name	./audio.h	/^	gchar *internal_name;$/;"	m	struct:audio_device
ionicepf	./kons.h	/^ string ionicepf; \/\/ Pfad zu ionice$/;"	m	struct:linst_cl
ipr	./kons.h	/^ instprog ipr=keinp; \/\/ installiertes Program$/;"	m	struct:linst_cl
irfind	./kons.cpp	/^size_t irfind(const string& wo, const string& was)$/;"	f
is_connected	./net_monitor.h	/^	gboolean is_connected;$/;"	m	struct:net_event
isatty	./kons.h	51;"	d
isdn_lock	./faxophone.c	58;"	d	file:
isdn_lock	./faxophone.c	61;"	d	file:
isdn_lock	./faxophone.c	64;"	d	file:
isdn_lock	./faxophone.h	70;"	d
isdn_lock	./faxophone.h	73;"	d
isdn_mutex	./faxophone.h	/^	GMutex isdn_mutex;$/;"	m	struct:session
isdn_unlock	./faxophone.c	59;"	d	file:
isdn_unlock	./faxophone.c	62;"	d	file:
isdn_unlock	./faxophone.c	65;"	d	file:
isdn_unlock	./faxophone.h	71;"	d
isdn_unlock	./faxophone.h	74;"	d
isneun	./kons.h	/^inline int isneun(const std::string& str)$/;"	f
isnumeric	./kons.h	/^inline int isnumeric(const char* str)$/;"	f
isnumeric	./kons.h	/^inline int isnumeric(const std::string& str)$/;"	f
istelnr	./kons.h	/^inline int istelnr(const std::string& str)$/;"	f
it	./kons.cpp	/^set<wele>::iterator find3cl::it;$/;"	m	class:find3cl	file:
it	./kons.h	/^    static set<wele>::iterator it;$/;"	m	struct:find3cl
it2	./kons.cpp	/^el2set::iterator it2;$/;"	v
it3	./kons.cpp	/^set<elem3>::iterator it3;$/;"	v
iwert	./kons.h	/^    int iwert; \/\/ Wert, der pptr zugewiesen wird, falls dieser Parameter gewaehlt wird; -1= Wert steht im nächsten Parameter, 1=pro Nennung in der Kommandozeile wert um 1 erhöhen$/;"	m	struct:optcl
journal_loaded	./appobject.h	/^	void (*journal_loaded)(GSList *journal);$/;"	m	struct:_AppObjectClass
kauswert	./kons.cpp	/^template <typename SCL> void confdcl::kauswert(schAcl<SCL> *sA, int obverb,const uchar mitclear\/*=1*\/)$/;"	f	class:confdcl
keineverarbeitung	./kons.h	/^		uchar keineverarbeitung=0; \/\/ wenn cronminuten geaendert werden sollen, vorher abkuerzen$/;"	m	struct:hcl
keinp	./kons.h	/^enum instprog {keinp,zypper,apt,dnf,yum,urp,pac};$/;"	e	enum:instprog
kf	./configure	/^kf() {$/;"	f
kfzg	./kons.h	/^    uchar kfzg=0; \/\/ Konfigurationsdatei-Namen ausgeben$/;"	m	struct:hcl
kompilbase	./kons.cpp	/^int hcl::kompilbase(const string& was, const string& endg)$/;"	f	class:hcl
kompilfort	./kons.cpp	/^int hcl::kompilfort(const string& was,const string& vorcfg\/*=string()*\/, const string& cfgbismake\/*==s_dampand*\/,uchar ohneconf\/*=0*\/)$/;"	f	class:hcl
kompiliere	./kons.cpp	/^int hcl::kompiliere(const string& was,const string& endg, const string& vorcfg\/*=string()*\/, const string& cfgbismake\/*==s_dampand*\/)$/;"	f	class:hcl
kons_H_DRIN	./kons.h	6;"	d
kons_T	./kons.cpp	/^const char *kons_T[T_konsMAX+1][SprachZahl]=$/;"	v
kopier	./kons.cpp	/^int kopier(const string& quel, const string& ziel, int obverb, int oblog)$/;"	f
kopierm	./kons.cpp	/^void kopierm(const string *quelle, const string *ziel)$/;"	f
kschreib	./kons.h	/^		uchar kschreib=0; \/\/ Konfigurationsdatei schreiben$/;"	m	struct:hcl
ktage	./fbfax.cpp	/^const unsigned ktage=1; \/\/ kurzes Intervall fuer Faxtabellenkorrektur, 1 Tag$/;"	v
kuerzelogdatei	./kons.cpp	/^int kuerzelogdatei(const char* logdatei,int obverb)$/;"	f
kuerzevtz	./kons.cpp	/^void kuerzevtz(string *vzp)$/;"	f
laeuft	./kons.cpp	/^int servc::laeuft()$/;"	f	class:servc
langu	./kons.h	/^    string langu; \/\/ Sprache (Anfangsbuchstabe)$/;"	m	struct:hcl
last_write	./faxophone.h	/^	gint64 last_write;$/;"	m	struct:recorder
lauf	./kons.cpp	/^void hcl::lauf()$/;"	f	class:hcl
laufrtag	./kons.h	/^		struct tm laufrtag={0}; \/\/ Tag des letztes Aufrufs$/;"	m	struct:hcl	typeref:struct:hcl::tm
law_2_linear16	./isdn-convert.c	/^unsigned short law_2_linear16[256];$/;"	v
leise	./configure	/^leise() {$/;"	f
letzter	./kons.h	/^ inline shared_ptr<SCL> letzter() {return schl[schl.size()-1];} $/;"	f	struct:schAcl
lgn	./kons.h	/^  Sprache lgn; \/\/ Sprache numerisch$/;"	m	struct:TxB
libs	./kons.h	/^ string libs; \/\/ alle lib-Verzeichnisse, fuer find ..$/;"	m	struct:linst_cl
lief	./kons.cpp	/^int servc::lief()$/;"	f	class:servc
lies	./kons.cpp	/^int confdcl::lies(const string& vfname, int obverb, const char tz\/*='='*\/)$/;"	f	class:confdcl
lieszaehlerein	./kons.cpp	/^void hcl::lieszaehlerein()$/;"	f	class:hcl
line_level_in_state	./faxophone.h	/^	double line_level_in_state;$/;"	m	struct:capi_connection
line_level_out_state	./faxophone.h	/^	double line_level_out_state;$/;"	m	struct:capi_connection
linear16_2_law	./isdn-convert.c	/^signed char linear16_2_law[65536];$/;"	v
linear2alaw	./isdn-convert.c	/^static unsigned char linear2alaw(short sample)$/;"	f	file:
linst_cl	./kons.cpp	/^linst_cl::linst_cl(int obverb,int oblog)$/;"	f	class:linst_cl
linst_cl	./kons.h	/^struct linst_cl$/;"	s
lnk	./kons.h	/^    const string lnk;$/;"	m	struct:elem3
local	./call.h	/^	struct contact *local;$/;"	m	struct:call	typeref:struct:call::
local	./faxophone.h	/^	struct record_channel local;$/;"	m	struct:recorder	typeref:struct:recorder::record_channel
local_number	./connection.h	/^	gchar *local_number;$/;"	m	struct:connection
loeschealleaus	./kons.cpp	/^string *loeschealleaus(string *u, const char* const alt) $/;"	f
loeschefarbenaus	./kons.cpp	/^string* loeschefarbenaus(string *zwi)$/;"	f
log_func	./logging.c	/^static void log_func(const gchar *log_domain, GLogLevelFlags log_level, const gchar *message, gpointer user_data)$/;"	f	file:
log_init	./logging.c	/^void log_init(gboolean debug)$/;"	f
log_level	./fax.c	/^static gint log_level = 0;$/;"	v	file:
log_level	./logging.c	/^static GLogLevelFlags log_level = G_LOG_LEVEL_DEBUG;$/;"	v	file:
log_save_data	./logging.c	/^void log_save_data(gchar *name, const gchar *data, gsize len)$/;"	f
log_set_level	./logging.c	/^void log_set_level(GLogLevelFlags level)$/;"	f
log_shutdown	./logging.c	/^void log_shutdown(void)$/;"	f
logdateineu	./kons.h	/^    uchar logdateineu=0; \/\/ logdt vorher loeschen$/;"	m	struct:hcl
logdname	./kons.h	/^    string logdname; \/\/ Logdatei-Name ohne Pfad <DPROG>.log$/;"	m	struct:hcl
logdneu	./kons.h	/^    uchar logdneu=0;    \/\/ Logdatei geaendert$/;"	m	struct:hcl
logdt	./fbfax.cpp	/^const char *logdt="\/var\/log\/" DPROG "vorgabe.log";\/\/darauf wird in kons.h verwiesen;$/;"	v
loggespfad	./kons.h	/^    string loggespfad; \/\/ Gesamtpfad, auf den dann die in kons.h verwiesene und oben definierte Variable logdt zeigt$/;"	m	struct:hcl
logging	./fax.c	/^static void (*logging)(gint level, const gchar *text) = NULL;$/;"	v	file:
logvneu	./kons.h	/^    uchar logvneu=0;    \/\/ Logverzeichnis geaendert$/;"	m	struct:hcl
logvz	./kons.h	/^    string logvz; \/\/ nur das Verzeichnis \/var\/log$/;"	m	struct:hcl
lookup	./contact.h	/^	gboolean lookup;$/;"	m	struct:contact
lst	./kons.h	/^    const struct stat lst={0};$/;"	m	struct:elem3	typeref:struct:elem3::stat
lstat	./kons.h	62;"	d
lsys	./kons.cpp	/^struct lsyscl lsys;$/;"	v	typeref:struct:lsyscl
lsyscl	./kons.h	/^struct lsyscl$/;"	s
lsysen	./kons.h	/^enum lsysen:uchar {usys,sus,deb,fed};$/;"	g
ltage	./fbfax.cpp	/^const unsigned ltage=73000; \/\/ langes Intervall fuer Faxtabellenkorrektur, 200 Jahre$/;"	v
ltoa_	./kons.cpp	/^char* ltoa_(long value, char* result, int base\/*=10*\/) $/;"	f
ltoan	./kons.cpp	/^string ltoan(long value, int base\/*=10*\/, uchar obtz\/*=0*\/, uchar minstel\/*=0*\/) $/;"	f
ltrim	./kons.h	/^inline std::string *ltrim(std::string *str) {$/;"	f	class:std
lut_a2s	./isdn-convert.c	/^static short *lut_a2s = NULL;$/;"	v	file:
lut_analyze	./isdn-convert.c	/^static unsigned char *lut_analyze = NULL;$/;"	v	file:
lut_in	./isdn-convert.c	/^static unsigned char *lut_in = NULL;$/;"	v	file:
lut_out	./isdn-convert.c	/^static unsigned char *lut_out = NULL;$/;"	v	file:
mFERTIG	./Makefile	/^mFERTIG=$(error mitzieh finished\/ Fertig mit mitzieh!)$/;"	m
m_color	./kons.h	/^  WORD m_color;$/;"	m	struct:color
mab	./kons.h	/^    time_t mab,mbis;$/;"	m	struct:find3cl
mabp	./kons.cpp	/^time_t *find3cl::mabp,*find3cl::mbisp;$/;"	m	class:find3cl	file:
mabp	./kons.h	/^    static time_t *mabp,*mbisp;$/;"	m	struct:find3cl
machfit	./kons.cpp	/^int servc::machfit(int obverb\/*=0*\/,int oblog\/*=0*\/, binaer nureinmal\/*=falsch*\/)$/;"	f	class:servc
machvers	./Makefile	/^define machvers	 $/;"	m
main	./fbfax.cpp	/^int main(int argc,char** argv) \/\/α$/;"	f
main_loop	./direkt.c	/^GMainLoop *main_loop = NULL;$/;"	v
manges	./Makefile	/^define manges$/;"	m
manu	./faxophone.h	/^	uint32_t manu[5];$/;"	m	struct:capi_profile
manual_hookup	./fax.h	/^	gboolean manual_hookup;$/;"	m	struct:fax_status
maxd	./kons.h	/^    const long maxd;$/;"	m	struct:wele
maxdepth	./kons.h	/^    long maxdepth=-1;$/;"	m	struct:find3cl
maxdepthp	./kons.cpp	/^long *find3cl::maxdepthp;$/;"	m	class:find3cl	file:
maxdepthp	./kons.h	/^    static long *maxdepthp;$/;"	m	struct:find3cl
mbis	./kons.h	/^    time_t mab,mbis;$/;"	m	struct:find3cl
mbisp	./kons.cpp	/^time_t *find3cl::mabp,*find3cl::mbisp;$/;"	m	class:find3cl	file:
mbisp	./kons.h	/^    static time_t *mabp,*mbisp;$/;"	m	struct:find3cl
mdatei	./kons.cpp	/^mdatei::mdatei(const string& name, ios_base::openmode modus\/*=ios_base::in|ios_base::out*\/,uchar faclbak\/*=1*\/,int obverb\/*=0*\/, int oblog\/*=0*\/)$/;"	f	class:mdatei
mdatei	./kons.h	/^struct mdatei: fstream$/;"	s
meinname	./kons.h	/^    string meinname; \/\/ base_name(meinpfad()) \/\/ argv[0] \/\/ <DPROG>$/;"	m	struct:hcl
meinpfad	./kons.cpp	/^string meinpfad() $/;"	f
message	./appobject.h	/^	void (*message)(gchar *title, gchar *message);$/;"	m	struct:_AppObjectClass
message_number	./faxophone.h	/^	int message_number;$/;"	m	struct:session
microsec_time	./phone.c	/^guint64 microsec_time(void)$/;"	f
mitcron	./kons.h	/^		const uchar mitcron; \/\/ ob Programm auch in Cron eingetragen werden kann; kann im Konstruktor angegeben werden$/;"	m	struct:hcl
mitpids	./kons.h	/^		uchar mitpids=0; \/\/ mehrere pids$/;"	m	struct:hcl
mitset	./kons.h	114;"	d
mitvtz	./kons.h	/^inline std::string mitvtz(std::string const& vz)$/;"	f
mntpunkt	./kons.cpp	/^int mntpunkt(const char* mntpfad) {$/;"	f
modem	./fax.h	/^	gchar modem;$/;"	m	struct:fax_status
monatsaufr	./kons.h	/^		ulong monatsaufr=0; \/\/ Zahl der bisherigen Programmaufrufe heute$/;"	m	struct:hcl
mpfad	./kons.h	/^    string mpfad;  \/\/ meinpfad()$/;"	m	struct:hcl
mpwd	./kons.h	/^		string mpwd;  \/\/ Passwort fuer Mysql\/MariaDB \/\/ω$/;"	m	struct:hcl
msg	./kons.h	/^		string msg;$/;"	m	struct:errmsgcl
msg	./network.h	/^	SoupMessage *msg;$/;"	m	struct:auth_data
msn	./fbfax.h	/^		string msn; $/;"	m	class:hhcl
mtage	./fbfax.cpp	/^const unsigned mtage=30; \/\/ mittleres Intervall fuer Faxtabellenkorrektur, 1 Monat$/;"	v
multischlschreib	./kons.cpp	/^template<typename SCL> int multischlschreib(const string& fname, schAcl<SCL> *const *const mcnfApp, const size_t cszahl,const string& mpfad)$/;"	f
muser	./kons.h	/^		string muser; \/\/ Benutzer fuer Mysql\/MariaDB$/;"	m	struct:hcl
mute	./faxophone.h	/^	int mute;$/;"	m	struct:capi_connection
nFERTIG	./Makefile	/^nFERTIG=$(error newproj finished\/ Fertig mit neuproj!)$/;"	m
name	./audio.h	/^	const gchar *name;$/;"	m	struct:audio
name	./audio.h	/^	gchar *name;$/;"	m	struct:audio_device
name	./contact.h	/^	gchar *name;$/;"	m	struct:contact
name	./kons.h	/^	string name;$/;"	m	struct:paarcl
name	./kons.h	/^	string name;$/;"	m	struct:schAcl
name	./kons.h	/^   const string name;$/;"	m	struct:aScl
name	./kons.h	/^ string name;$/;"	m	struct:pidcl
nbchannel	./faxophone.h	/^	uint16_t nbchannel;$/;"	m	struct:capi_profile
ncci	./faxophone.h	/^	unsigned long int ncci;$/;"	m	struct:capi_connection
ncontroller	./faxophone.h	/^	uint16_t ncontroller;$/;"	m	struct:capi_profile
ncpi	./faxophone.h	/^	gchar *ncpi;$/;"	m	struct:capi_connection
nersetze	./kons.cpp	/^string nersetze(const string& quelle, string const& was, string const& durch)$/;"	f
net_add_event	./net_monitor.c	/^gconstpointer net_add_event(net_connect_func connect, net_disconnect_func disconnect, gpointer user_data)$/;"	f
net_connect_func	./net_monitor.h	/^typedef gboolean (*net_connect_func)(gpointer user_data);$/;"	t
net_disconnect_func	./net_monitor.h	/^typedef gboolean (*net_disconnect_func)(gpointer user_data);$/;"	t
net_event	./net_monitor.h	/^struct net_event {$/;"	s
net_event_list	./net_monitor.c	/^static GSList *net_event_list = NULL;$/;"	v	file:
net_init	./network.c	/^gboolean net_init(void)$/;"	f
net_is_online	./net_monitor.c	/^gboolean net_is_online(void)$/;"	f
net_monitor_changed_cb	./net_monitor.c	/^void net_monitor_changed_cb(GNetworkMonitor *monitor, gboolean available, gpointer unused)$/;"	f
net_monitor_init	./net_monitor.c	/^gboolean net_monitor_init(void)$/;"	f
net_monitor_reconnect	./net_monitor.c	/^void net_monitor_reconnect(void)$/;"	f
net_monitor_shutdown	./net_monitor.c	/^void net_monitor_shutdown(void)$/;"	f
net_monitor_state_changed	./net_monitor.c	/^void net_monitor_state_changed(gboolean state)$/;"	f
net_online	./net_monitor.c	/^static gboolean net_online = FALSE;$/;"	v	file:
net_remove_event	./net_monitor.c	/^void net_remove_event(gconstpointer net_event_id)$/;"	f
net_shutdown	./network.c	/^void net_shutdown(void)$/;"	f
net_state	./net_monitor.c	/^static inline gchar *net_state(gboolean state)$/;"	f	file:
network_authenticate	./network.c	/^void network_authenticate(gboolean auth_set, struct auth_data *auth_data)$/;"	f
network_authenticate_cb	./network.c	/^static void network_authenticate_cb(SoupSession *session, SoupMessage *msg, SoupAuth *auth, gboolean retrying, gpointer user_data)$/;"	f	file:
neufind	./kons.h	111;"	d
neurf	./fbfax.cpp	/^void hhcl::neurf()$/;"	f	class:hhcl
ngvz	./fbfax.h	/^		string ngvz; \/\/ Nichtgefaxt-Verzeichnis (Gescheiterte)$/;"	m	class:hhcl
nicepf	./kons.h	/^ string nicepf; \/\/ Pfad zu nice$/;"	m	struct:linst_cl
nix	./kons.cpp	/^const string nix;$/;"	v
nochkeincron	./kons.h	/^		uchar nochkeincron;$/;"	m	struct:hcl
notification	./connection.h	/^	void *notification;$/;"	m	struct:connection
nr	./kons.h	/^	unsigned long nr=0;$/;"	m	struct:perfcl
nrp	./kons.h	/^		ull *nrp=0;$/;"	m	struct:find2cl
number	./contact.h	/^	gchar *number;$/;"	m	struct:contact
number_format	./call.h	/^enum number_format {$/;"	g
numbers	./contact.h	/^	GSList *numbers;$/;"	m	struct:contact
nurexec	./kons.h	/^		int nurexec;$/;"	m	struct:find3cl
nurexecp	./kons.cpp	/^int *find3cl::nurexecp;$/;"	m	class:find3cl	file:
nurexecp	./kons.h	/^		static int *nurexecp;$/;"	m	struct:find3cl
oausgeb	./kons.cpp	/^template<typename SCL> void schAcl<SCL>::oausgeb(const char* const farbe,int obverb\/*=0*\/,int oblog\/*=0*\/)$/;"	f	class:schAcl
obenabled	./kons.h	/^		int obenabled=0;$/;"	m	struct:servc
oberreicht	./kons.cpp	/^int perfcl::oberreicht(unsigned long sek)$/;"	f	class:perfcl
obfehlt	./kons.cpp	/^int linst_cl::obfehlt(const string& prog,int obverb,int oblog)$/;"	f	class:linst_cl
obfragz	./kons.h	/^		const uchar* obfragz; \/\/ Zeiger auf Variable, die ggf. mit 1 bezeichnet, dass Option in rueckfragen abgefragt werden soll;$/;"	m	struct:optcl
obfstream	./kons.h	1058;"	d
obgelesen	./kons.h	/^	uchar obgelesen;$/;"	m	struct:confdcl
obhilfe	./kons.h	/^    uchar obhilfe=0;      \/\/ Hilfe anzeigen: 1=kurze Hilfe, 2=lange Hilfe, 3=Standardhilfe$/;"	m	struct:hcl
oblgschreib	./kons.h	/^    uchar oblgschreib=0; \/\/ Konfigurationsdatei seitens der Sprache voraussichtlich schreiben$/;"	m	struct:hcl
oblog	./kons.h	/^		int oblog=0;  \/\/ mehr Protokollieren$/;"	m	struct:hcl
oblog	./kons.h	/^		int obverb,oblog;$/;"	m	struct:find2cl
oblog	./kons.h	/^		int obverb=0, oblog=0;$/;"	m	struct:find3cl
oblogp	./kons.cpp	/^int *find3cl::obverbp, *find3cl::oblogp;$/;"	m	class:find3cl	file:
oblogp	./kons.h	/^		static int *obverbp, *oblogp;$/;"	m	struct:find3cl
obnmr	./kons.h	/^ uchar obnmr=1;$/;"	m	struct:linst_cl
obprogda	./kons.cpp	/^int obprogda(const string& prog, int obverb\/*=0*\/, int oblog\/*=0*\/, string *pfad\/*=0*\/,const int keinsu\/*=0*\/)$/;"	f
obsetz	./kons.h	/^		uchar obsetz=1; \/\/ setzzaehler$/;"	m	struct:hcl
obsotiff	./kons.h	/^		uchar obsotiff=0; \/\/ 1 = tiff wird von der source verwendet$/;"	m	struct:hcl
obsvfeh	./kons.cpp	/^int servc::obsvfeh(int obverb\/*=0*\/,int oblog\/*=0*\/) \/\/ ob service einrichtungs fehler$/;"	f	class:servc
obverb	./kons.h	/^		int obverb,oblog;$/;"	m	struct:find2cl
obverb	./kons.h	/^		int obverb=0, oblog=0;$/;"	m	struct:find3cl
obverb	./kons.h	/^		int obverb=0; \/\/ verbose$/;"	m	struct:hcl
obverbp	./kons.cpp	/^int *find3cl::obverbp, *find3cl::oblogp;$/;"	m	class:find3cl	file:
obverbp	./kons.h	/^		static int *obverbp, *oblogp;$/;"	m	struct:find3cl
obvi	./kons.h	/^		uchar obvi=0; \/\/ ob Konfigurationsdatei editiert werden soll$/;"	m	struct:hcl
obvs	./kons.h	/^		uchar obvs=0;   \/\/ ob Quelldateien bearbeitet werden sollen$/;"	m	struct:hcl
obzuschreib	./kons.h	/^	uchar obzuschreib;$/;"	m	struct:confdcl
oeffne	./kons.cpp	/^oeffne(const string& datei, uchar oart, uchar* erfolg,int obverb\/*=0*\/, int oblog\/*=0*\/,uchar faclbak\/*=1*\/)$/;"	f
okmap	./kons.h	/^ map<const char* const,SCL const*> okmap; \/\/ map der Optionen, sortiert nach Tx[<kurzi>]$/;"	m	struct:schAcl
olmap	./kons.h	/^ map<const char* const,SCL const*> olmap; \/\/ map der Optionen, sortiert nach Tx[<langi>]$/;"	m	struct:schAcl
omap	./kons.h	/^ map<string,SCL*> omap; \/\/ map der Optionen$/;"	m	struct:schAcl
omit	./kons.h	/^ typename map<string,SCL*>::iterator omit; \/\/ Optionen-Iterator$/;"	m	struct:schAcl
open	./audio.h	/^	gpointer (*open)(void);$/;"	m	struct:audio
operator ()	./kons.cpp	/^ostream &ztacl::operator()(std::ostream& out) const {$/;"	f	class:ztacl
operator <	./kons.cpp	/^const bool elem2::operator<(const elem2& el) const {return (this->pfad<el.pfad);}$/;"	f	class:elem2
operator <	./kons.cpp	/^const bool elem3::operator<(const elem3& el) const {return (this->pfad<el.pfad);}$/;"	f	class:elem3
operator <	./kons.cpp	/^const bool wele::operator<(const wele& el) const {return (this->pfad<el.pfad);}$/;"	f	class:wele
operator <<	./kons.cpp	/^  std::basic_ostream<_Elem,_Traits>& operator<<(std::basic_ostream<_Elem,_Traits>& i, color& c){$/;"	f	class:std
operator <<	./kons.cpp	/^ostream &operator<<(ostream &out,ztacl ztaus) {$/;"	f
operator <<	./kons.cpp	/^template<typename SCL> schAcl<SCL>& schAcl<SCL>::operator<<(SCL *schp) $/;"	f	class:schAcl
operator <<	./kons.cpp	/^template<typename SCL> schAcl<SCL>& schAcl<SCL>::operator<<(shared_ptr<SCL> schp)$/;"	f	class:schAcl
operator <<	./kons.h	/^	inline aSvec& operator<<(const aScl& aS) {$/;"	f	struct:aSvec
operator <<	./kons.h	/^	inline svec& operator<<(const std::string& str) {$/;"	f	struct:svec
operator <<	./kons.h	/^    inline tsvec<T>& operator<<(const T& str) {$/;"	f	struct:tsvec
operator <<	./kons.h	/^ inline pidvec& operator<<(const pidcl& pd) {$/;"	f	struct:pidvec
operator []	./kons.h	/^	inline const char* const operator[](long const& nr) const {$/;"	f	struct:TxB
operator []	./kons.h	/^ inline const shared_ptr<const SCL> operator[](size_t const& nr) const { return schl[nr];}$/;"	f	struct:schAcl
operator []	./kons.h	/^ inline shared_ptr<SCL> operator[](size_t const& nr) { return schl[nr];} \/\/ fuer hilfezeile, virtmachbemerk$/;"	f	struct:schAcl
optcl	./kons.cpp	/^optcl::optcl(const string& pname,const void* pptr,const par_t part, const int kurzi, const int langi, TxB* TxBp, const long Txi, const uchar wi, const long Txi2, const string rottxt, const int iwert,const uchar woher, const string& Txtrf\/*={}*\/,const uchar obno\/*=(uchar)-1*\/,const string* refstr\/*=0*\/,const uchar* obfragz\/*=0*\/,fnhcliztyp fnobfragz\/*=0*\/,fnhclztyp fnnachhz\/*=0*\/,fnhclztyp fnvorhz\/*=0*\/,uchar sonderrf\/*=0*\/,fnhcliztyp fngueltigz\/*=0*\/):$/;"	f	class:optcl
optcl	./kons.cpp	/^optcl::optcl(const void* pptr,const par_t part, const int kurzi, const int langi, TxB* TxBp, const long Txi,$/;"	f	class:optcl
optcl	./kons.h	/^struct optcl:wpgcl$/;"	s
opts	./kons.h	/^    vector<optioncl> opts;$/;"	m	struct:hcl
optslsz	./kons.h	/^    size_t optslsz=0; \/\/ last opts.size()$/;"	m	struct:hcl
p1	./fbfax.h	/^		string p1;$/;"	m	class:hhcl
p2	./fbfax.h	/^		int p2;$/;"	m	class:hhcl
p3	./fbfax.h	/^		string p3;$/;"	m	class:hhcl
p3cpf	./kons.h	/^ string p3cpf; \/\/ Pfad zu python3-config$/;"	m	struct:linst_cl
paarcl	./kons.cpp	/^paarcl::paarcl(const string& name, const string *const wertp, const string& bemerk):name(name),wert(*wertp),bemerk(bemerk)$/;"	f	class:paarcl
paarcl	./kons.h	/^struct paarcl$/;"	s
paare	./kons.h	/^	vector<paarcl> paare;$/;"	m	struct:confdcl
pac	./kons.h	/^enum instprog {keinp,zypper,apt,dnf,yum,urp,pac};$/;"	e	enum:instprog
page_current	./fax.h	/^	gint page_current;$/;"	m	struct:fax_status
page_total	./fax.h	/^	gint page_total;$/;"	m	struct:fax_status
par_t	./kons.h	/^enum par_t:uchar {pstri,pdez,ppwd,pverz,pfile,puchar,pbin,pint,plong,pdat}; \/\/ Parameterart: Sonstiges, Verzeichnis, Datei, uchar, int, long, Datum (struct tm)$/;"	g
parent	./appobject.h	/^	GObject parent;$/;"	m	struct:_AppObject
parent_class	./appobject.h	/^	GObjectClass parent_class;$/;"	m	struct:_AppObjectClass
parsecl	./kons.cpp	/^void hcl::parsecl()$/;"	f	class:hcl
parstreng	./kons.h	/^		const uchar parstreng; \/\/ breche Programm ab, wenn Parameter nicht gefunden$/;"	m	struct:hcl
part	./kons.h	/^    par_t part=pstri; \/\/ Parameterart$/;"	m	struct:wpgcl
passwd	./kons.h	/^		struct passwd *passwd;$/;"	m	struct:cuscl	typeref:struct:cuscl::
passwddt	./kons.h	/^		static const string passwddt, groupdt, sudoersdt;$/;"	m	struct:hcl
password	./network.h	/^	gchar *password;$/;"	m	struct:auth_data
pbin	./kons.h	/^enum par_t:uchar {pstri,pdez,ppwd,pverz,pfile,puchar,pbin,pint,plong,pdat}; \/\/ Parameterart: Sonstiges, Verzeichnis, Datei, uchar, int, long, Datum (struct tm)$/;"	e	enum:par_t
pdat	./kons.h	/^enum par_t:uchar {pstri,pdez,ppwd,pverz,pfile,puchar,pbin,pint,plong,pdat}; \/\/ Parameterart: Sonstiges, Verzeichnis, Datei, uchar, int, long, Datum (struct tm)$/;"	e	enum:par_t
pdez	./kons.h	/^enum par_t:uchar {pstri,pdez,ppwd,pverz,pfile,puchar,pbin,pint,plong,pdat}; \/\/ Parameterart: Sonstiges, Verzeichnis, Datei, uchar, int, long, Datum (struct tm)$/;"	e	enum:par_t
perfcl	./kons.cpp	/^perfcl::perfcl(const string& vvonwo): vonwo(vvonwo)$/;"	f	class:perfcl
perfcl	./kons.h	/^struct perfcl$/;"	s
pfad	./kons.h	/^    const string pfad;$/;"	m	struct:wele
pfad	./kons.h	/^    string pfad;$/;"	m	struct:elem2
pfad	./kons.h	/^    string pfad;$/;"	m	struct:elem3
pfile	./kons.h	/^enum par_t:uchar {pstri,pdez,ppwd,pverz,pfile,puchar,pbin,pint,plong,pdat}; \/\/ Parameterart: Sonstiges, Verzeichnis, Datei, uchar, int, long, Datum (struct tm)$/;"	e	enum:par_t
phase	./fax.h	/^	enum fax_phase phase;$/;"	m	struct:fax_status	typeref:enum:fax_status::fax_phase
phase_handler_b	./fax.c	/^static gint phase_handler_b(t30_state_t *state, void *user_data, gint result)$/;"	f	file:
phase_handler_d	./fax.c	/^static gint phase_handler_d(t30_state_t *state, void *user_data, gint result)$/;"	f	file:
phase_handler_e	./fax.c	/^static void phase_handler_e(t30_state_t *state, void *user_data, gint result)$/;"	f	file:
phone_call	./phone.c	/^struct capi_connection *phone_call(guchar controller, const char *source, const char *target, gboolean anonymous)$/;"	f
phone_conference	./phone.c	/^void phone_conference(struct capi_connection *active, struct capi_connection *hold)$/;"	f
phone_flush	./phone.c	/^void phone_flush(struct capi_connection *connection)$/;"	f
phone_hangup	./phone.c	/^void phone_hangup(struct capi_connection *connection)$/;"	f
phone_hold	./phone.c	/^void phone_hold(struct capi_connection *connection, guchar hold)$/;"	f
phone_init_data	./phone.c	/^void phone_init_data(struct capi_connection *connection)$/;"	f
phone_input_thread	./phone.c	/^gpointer phone_input_thread(gpointer data)$/;"	f
phone_mute	./phone.c	/^void phone_mute(struct capi_connection *connection, guchar mute)$/;"	f
phone_pickup	./phone.c	/^int phone_pickup(struct capi_connection *connection)$/;"	f
phone_record	./phone.c	/^void phone_record(struct capi_connection *connection, guchar record, const char *dir)$/;"	f
phone_send_dtmf_code	./phone.c	/^void phone_send_dtmf_code(struct capi_connection *connection, guchar code)$/;"	f
phone_transfer	./phone.c	/^void phone_transfer(struct capi_connection *connection, _cmsg capi_message)$/;"	f
phsession	./faxophone.c	/^static struct session *phsession = NULL;$/;"	v	typeref:struct:	file:
pid	./kons.h	/^ pid_t pid;$/;"	m	struct:pidcl
pidcl	./kons.h	/^ pidcl(const pid_t pid,const string& name):pid(pid),name(name){}$/;"	f	struct:pidcl
pidcl	./kons.h	/^struct pidcl$/;"	s
pidv	./kons.h	/^		pidvec pidv;$/;"	m	struct:hcl
pidvec	./kons.h	/^struct pidvec: public vector<pidcl>$/;"	s
pidw	./fbfax.cpp	/^pidvec pidw;$/;"	v
pint	./kons.h	/^enum par_t:uchar {pstri,pdez,ppwd,pverz,pfile,puchar,pbin,pint,plong,pdat}; \/\/ Parameterart: Sonstiges, Verzeichnis, Datei, uchar, int, long, Datum (struct tm)$/;"	e	enum:par_t
pkill	./kons.cpp	/^void servc::pkill(int obverb\/*=0*\/,int oblog\/*=0*\/)$/;"	f	class:servc
plci	./faxophone.h	/^	unsigned long int plci;$/;"	m	struct:capi_connection
plong	./kons.h	/^enum par_t:uchar {pstri,pdez,ppwd,pverz,pfile,puchar,pbin,pint,plong,pdat}; \/\/ Parameterart: Sonstiges, Verzeichnis, Datei, uchar, int, long, Datum (struct tm)$/;"	e	enum:par_t
position	./faxophone.h	/^	gint64 position;$/;"	m	struct:record_channel
pptr	./kons.h	/^    const void *pptr={0}; \/\/ Zeiger auf Parameter, der hier eingestellt werden kann$/;"	m	struct:wpgcl
ppwd	./kons.h	/^enum par_t:uchar {pstri,pdez,ppwd,pverz,pfile,puchar,pbin,pint,plong,pdat}; \/\/ Parameterart: Sonstiges, Verzeichnis, Datei, uchar, int, long, Datum (struct tm)$/;"	e	enum:par_t
prefix	./call.h	/^	gchar *prefix;$/;"	m	struct:call_by_call_entry
prefix_length	./call.h	/^	gint prefix_length;$/;"	m	struct:call_by_call_entry
printBits	./kons.cpp	/^void printBits(size_t const size, void const * const ptr)$/;"	f
printf_mutex	./kons.cpp	/^pthread_mutex_t printf_mutex, getmutex, timemutex;$/;"	v
priv	./call.h	/^	gchar *priv;$/;"	m	struct:call
priv	./connection.h	/^	void *priv;$/;"	m	struct:connection
priv	./contact.h	/^	gpointer priv;$/;"	m	struct:contact
priv	./faxophone.h	/^	void *priv;$/;"	m	struct:capi_connection
priv_html	./Makefile	/^define priv_html$/;"	m
progress_status	./fax.h	/^	gboolean progress_status;$/;"	m	struct:fax_status
progvers	./kons.cpp	/^double hcl::progvers(const string& prog,string *ergptr\/*0*\/)$/;"	f	class:hcl
pruefberecht	./kons.cpp	/^int pruefberecht(const string& datei,const string& benutzer,const mode_t mod\/*=01*\/,int obverb\/*=0*\/)$/;"	f
pruefcron	./kons.cpp	/^uchar hcl::pruefcron(const string& cm)$/;"	f	class:hcl
pruefggfmehrfach	./kons.cpp	/^void hcl::pruefggfmehrfach()$/;"	f	class:hcl
pruefinstv	./kons.cpp	/^int hcl::pruefinstv()$/;"	f	class:hcl
pruefmehrfach	./kons.cpp	/^void pruefmehrfach(const string& wen,int obverb\/*=0*\/,uchar obstumm\/*=0*\/)$/;"	f
pruefplatte	./kons.cpp	/^void pruefplatte()$/;"	f
pruefsamba	./kons.cpp	/^void hcl::pruefsamba(const vector<const string*>& vzn,const svec& abschni,const svec& suchs, const char* DPROG,const string& cuser)$/;"	f	class:hcl
prueftif	./kons.cpp	/^void hcl::prueftif(string aktvers)$/;"	f	class:hcl
pruefverz	./kons.cpp	/^int pruefverz(const string& verz,int obverb\/*=0*\/,int oblog\/*=0*\/, uchar obmitfacl\/*=0*\/,uchar obmitcon\/*=0*\/, $/;"	f
pstri	./kons.h	/^enum par_t:uchar {pstri,pdez,ppwd,pverz,pfile,puchar,pbin,pint,plong,pdat}; \/\/ Parameterart: Sonstiges, Verzeichnis, Datei, uchar, int, long, Datum (struct tm)$/;"	e	enum:par_t
psuch	./kons.h	/^ string psuch; \/\/ Befehl zum Pruefen auf Vorhandensein ueber das Installationssystem$/;"	m	struct:linst_cl
ptr	./direkt.c	/^string *ptr;$/;"	v
puchar	./kons.h	/^enum par_t:uchar {pstri,pdez,ppwd,pverz,pfile,puchar,pbin,pint,plong,pdat}; \/\/ Parameterart: Sonstiges, Verzeichnis, Datei, uchar, int, long, Datum (struct tm)$/;"	e	enum:par_t
pverz	./kons.h	/^enum par_t:uchar {pstri,pdez,ppwd,pverz,pfile,puchar,pbin,pint,plong,pdat}; \/\/ Parameterart: Sonstiges, Verzeichnis, Datei, uchar, int, long, Datum (struct tm)$/;"	e	enum:par_t
pvirtVorgbSpeziell	./fbfax.cpp	/^void hhcl::pvirtVorgbSpeziell()$/;"	f	class:hhcl
pvirtVorgbSpeziell	./vgb.cpp	/^void hhcl::pvirtVorgbSpeziell()$/;"	f	class:hhcl
pvirtfuehraus	./fbfax.cpp	/^void hhcl::pvirtfuehraus() \/\/α$/;"	f	class:hhcl
pvirtmacherkl	./fbfax.cpp	/^void hhcl::pvirtmacherkl()$/;"	f	class:hhcl
pvirtnachrueckfragen	./fbfax.cpp	/^void hhcl::pvirtnachrueckfragen()$/;"	f	class:hhcl
pvirtvorrueckfragen	./fbfax.cpp	/^void hhcl::pvirtvorrueckfragen()$/;"	f	class:hhcl
pvirtvorzaehler	./fbfax.cpp	/^void hhcl::pvirtvorzaehler()$/;"	f	class:hhcl
pwd	./direkt.h	/^    const std::string pwd;$/;"	m	class:fbcl
pwd	./fbfax.h	/^		string pwd;$/;"	m	class:hhcl
pzuweis	./kons.cpp	/^int optcl::pzuweis(const char *const nacstr, const uchar vgegenteil\/*=0*\/, const uchar vnichtspeichern\/*=0*\/)$/;"	f	class:optcl
read	./audio.h	/^	gsize (*read)(gpointer priv, guchar *buffer, gsize max_len);$/;"	m	struct:audio
real_time_frame_handler	./fax.c	/^static void real_time_frame_handler(t30_state_t *state, void *user_data, gint direction, const uint8_t *msg, gint len)$/;"	f	file:
reason	./faxophone.h	/^	unsigned int reason;$/;"	m	struct:capi_connection
reason_b3	./faxophone.h	/^	unsigned int reason_b3;$/;"	m	struct:capi_connection
record_channel	./faxophone.h	/^struct record_channel {$/;"	s
recorder	./faxophone.h	/^	struct recorder recorder;$/;"	m	struct:capi_connection	typeref:struct:capi_connection::recorder
recorder	./faxophone.h	/^struct recorder {$/;"	s
recording	./faxophone.h	/^	int recording;$/;"	m	struct:capi_connection
recording	./faxophone.h	/^enum recording {$/;"	g
recording_close	./phone.c	/^int recording_close(struct recorder *recorder)$/;"	f
recording_flush	./phone.c	/^int recording_flush(struct recorder *recorder, guint last)$/;"	f
recording_init	./phone.c	/^int recording_init(struct recorder *recorder)$/;"	f
recording_open	./phone.c	/^int recording_open(struct recorder *recorder, char *file)$/;"	f
recording_write	./phone.c	/^int recording_write(struct recorder *recorder, short *buf, int size, int channel)$/;"	f
reduzierlibtiff	./kons.cpp	/^void hcl::reduzierlibtiff()$/;"	f	class:hcl
regp	./kons.cpp	/^regex_t *find3cl::regp;$/;"	m	class:find3cl	file:
regp	./kons.h	/^    static regex_t *regp;$/;"	m	struct:find3cl
regs	./kons.h	/^    regex_t regs;$/;"	m	struct:find3cl
remote	./call.h	/^	struct contact *remote;$/;"	m	struct:call	typeref:struct:call::
remote	./faxophone.h	/^	struct record_channel remote;$/;"	m	struct:recorder	typeref:struct:recorder::record_channel
remote_ident	./fax.h	/^	gchar remote_ident[64];$/;"	m	struct:fax_status
remote_number	./connection.h	/^	gchar *remote_number;$/;"	m	struct:connection
repos	./kons.h	/^ string repos; \/\/ Befehl zum Hinzufuegen des Repositories fuer den Compiler$/;"	m	struct:linst_cl
reserve	./kons.h	/^								 reserve=4*grenze;$/;"	m	struct:ic_cl
reserved	./faxophone.h	/^	uint32_t reserved[6];$/;"	m	struct:capi_profile
restart	./kons.cpp	/^int servc::restart(int obverb\/*=0*\/,int oblog\/*=0*\/)$/;"	f	class:servc
retry	./network.h	/^	gboolean retry;$/;"	m	struct:auth_data
richtige	./kons.h	/^	size_t richtige;$/;"	m	struct:confdcl
right	./kons.h	/^inline std::string right(std::string const& source, size_t const length)$/;"	f
ring	./faxophone.h	/^	void (*ring)(struct capi_connection *connection);$/;"	m	struct:session_handlers_st
rm_error	./routermanager.h	/^} rm_error;$/;"	t	typeref:enum:__anon1
rmcl	./routermanager.c	/^rmcl::rmcl(gboolean debug, GError **error)$/;"	f	class:rmcl
rmcl	./routermanager.h	/^struct rmcl$/;"	s
rot	./kons.cpp	/^const char *const drot="", *const rot="", *const schwarz="", *const blau="", *const gelb="", *const tuerkis="", *const hgrau="";$/;"	v
rot	./kons.cpp	/^const char *const schwarz="\\e[0m", *const dgrau="\\e[1;30m", *const drot="\\e[0;31m", *const rot="\\e[1;31m",$/;"	v
rottxt	./kons.h	/^    const string rottxt; \/\/ ggf rot zu markierender Text zwischen Txi und Txi2$/;"	m	struct:optcl
routermanager_audio_register	./audio.c	/^void routermanager_audio_register(struct audio *audio)$/;"	f
rtrim	./kons.h	/^inline std::string *rtrim(std::string *str) {$/;"	f	class:std
rtrim	./kons.h	/^inline void rtrim(char* str,size_t size) {$/;"	f
rueckfragen	./kons.cpp	/^void hcl::rueckfragen()$/;"	f	class:hcl
rzf	./kons.h	/^    uchar rzf=0; \/\/ rueckzufragen$/;"	m	struct:hcl
save_password_callback	./network.c	/^static void save_password_callback(SoupMessage* msg, struct auth_data *auth_data)$/;"	f	file:
sb	./kons.h	/^    const struct stat sb={0};$/;"	m	struct:elem3	typeref:struct:elem3::stat
schAcl	./kons.cpp	/^template<> schAcl<WPcl>::schAcl(const string& name, vector<aScl> *v):name(name)$/;"	f	class:schAcl
schAcl	./kons.cpp	/^template<> schAcl<WPcl>::schAcl(const string& name, vector<aScl> v):name(name)$/;"	f	class:schAcl
schAcl	./kons.cpp	/^template<typename SCL> schAcl<SCL>::schAcl(const string& name):name(name)$/;"	f	class:schAcl
schAcl	./kons.h	/^template <typename SCL> struct schAcl {$/;"	s
schAschreib	./kons.cpp	/^template<typename SCL> void schAcl<SCL>::schAschreib(mdatei *const f,int obverb)$/;"	f	class:schAcl
schl	./kons.h	/^	vector<shared_ptr<SCL>> schl; \/\/ Schlüsselklasse Schlüssel$/;"	m	struct:schAcl
schluss	./kons.cpp	/^int schluss(const int fnr,const string text,int oblog)$/;"	f
schreibzaehler	./kons.cpp	/^void hcl::schreibzaehler()$/;"	f	class:hcl
schwarz	./kons.cpp	/^const char *const drot="", *const rot="", *const schwarz="", *const blau="", *const gelb="", *const tuerkis="", *const hgrau="";$/;"	v
schwarz	./kons.cpp	/^const char *const schwarz="\\e[0m", *const dgrau="\\e[1;30m", *const drot="\\e[0;31m", *const rot="\\e[1;31m",$/;"	v
semanpruef	./kons.cpp	/^void servc::semanpruef(int obverb\/*=0*\/,int oblog\/*=0*\/,const string& mod\/*="getty_t*\/)$/;"	f	class:servc
semodpruef	./kons.cpp	/^void servc::semodpruef(int obverb\/*=0*\/,int oblog\/*=0*\/)$/;"	f	class:servc
sending	./fax.h	/^	gboolean sending;$/;"	m	struct:fax_status
sep	./fbfax.cpp	/^const char sep = 9; \/\/ geht auch: "[[:blank:]]"$/;"	v
sersetze	./kons.cpp	/^string *sersetze(string* src, string const& target, string const& repl) $/;"	f
servT	./tr64.h	/^		string servT;$/;"	m	class:tr64cl
servc	./kons.cpp	/^servc::servc(const string& vsname,const string& vename,int obverb, int oblog): sname((vsname.empty()?vename:vsname)),ename(vename) $/;"	f	class:servc
servc	./kons.h	/^    servc(const string& vsname,const string& vename): sname((vsname.empty()?vename:vsname)),ename(vename) {}$/;"	f	struct:servc
servc	./kons.h	/^struct servc {$/;"	s
servs	./tr64.h	/^		string servs;$/;"	m	class:tr64cl
session	./direkt.h	/^\/*static *\/struct session *session = NULL;$/;"	m	class:fbcl	typeref:struct:fbcl::
session	./faxophone.h	/^struct session {$/;"	s
session	./network.h	/^	SoupSession *session;$/;"	m	struct:auth_data
session_handlers	./fax_phone.c	/^struct session_handlers_st session_handlers = {$/;"	v	typeref:struct:session_handlers_st
session_handlers_st	./faxophone.h	/^struct session_handlers_st {$/;"	s
session_type	./faxophone.h	/^enum session_type {$/;"	g
setfaclggf	./kons.cpp	/^int setfaclggf(const string& datei,int obverb\/*=0*\/,int oblog\/*=0*\/,const binaer obunter\/*=falsch*\/,int mod\/*=4*\/,uchar obimmer\/*=0*\/,$/;"	f
setz_gitv	./Makefile	/^define setz_gitv$/;"	m
setzbemerkwoher	./kons.cpp	/^template<typename SCL> void schAcl<SCL>::setzbemerkwoher(SCL *optp,const string& ibemerk,const uchar vwoher)$/;"	f	class:schAcl
setzbemv	./kons.cpp	/^template<typename SCL> void schAcl<SCL>::setzbemv(const string& pname,TxB *TxBp,size_t Tind,uchar obfarbe,svec *fertige)$/;"	f	class:schAcl
setzbenutzer	./kons.cpp	/^void hcl::setzbenutzer(string *const user)$/;"	f	class:hcl
setzlog	./kons.cpp	/^void hcl::setzlog()$/;"	f	class:hcl
setzstr	./kons.cpp	/^int WPcl::setzstr(const char* const neuw,uchar *const obzuschreib\/*=0*\/,const uchar ausDatei\/*=0*\/)$/;"	f	class:WPcl
setzstr	./kons.cpp	/^int WPcl::setzstr(const string& neus,uchar *const obzuschreib\/*=0*\/,const uchar ausDatei\/*=0*\/)$/;"	f	class:WPcl
setzstr	./kons.cpp	/^int optcl::setzstr(const char* const neuw,uchar *const obzuschreib\/*=0*\/,const uchar ausDatei\/*=0*\/)$/;"	f	class:optcl
setztmpcron	./kons.cpp	/^void hcl::setztmpcron()$/;"	f	class:hcl
setzwert	./kons.cpp	/^void optcl::setzwert()$/;"	f	class:optcl
setzzaehler	./kons.cpp	/^void hcl::setzzaehler()$/;"	f	class:hcl
shpf	./kons.h	/^ string shpf; \/\/ Pfad zu sh$/;"	m	struct:linst_cl
sinit	./kons.cpp	/^template <> void schAcl<WPcl>::sinit(size_t vzahl, ...)$/;"	f	class:schAcl
sinit	./kons.cpp	/^template <> void schAcl<optcl>::sinit(size_t vzahl, ...)$/;"	f	class:schAcl
sinit	./kons.cpp	/^template<typename SCL> void schAcl<SCL>::sinit(vector<shared_ptr<SCL>> sqlvp)$/;"	f	class:schAcl
size	./kons.h	/^ inline size_t size(){return schl.size();}$/;"	f	struct:schAcl
smbdt	./kons.h	/^		static const char* const smbdt;\/\/ "\/etc\/samba\/smb.conf"$/;"	m	struct:hcl
sname	./kons.h	/^    string sname,ename; \/\/ Dienstname, Exename$/;"	m	struct:servc
snprintf	./kons.h	80;"	d
soup_session	./network.c	/^SoupSession *soup_session = NULL;$/;"	v
source	./faxophone.h	/^	char *source;$/;"	m	struct:capi_connection
spandsp_close	./fax.c	/^gint spandsp_close(fax_state_t *fax_state)$/;"	f
spandsp_init	./fax.c	/^gint spandsp_init(const gchar *tiff_file, gboolean sending, gchar modem, gchar ecm, const gchar *lsi, const gchar *local_header_info, struct capi_connection *connection)$/;"	f
spandsp_msg_log	./fax.c	/^static void spandsp_msg_log(gint level, const gchar *text)$/;"	f	file:
spandsp_rx	./fax.c	/^gint spandsp_rx(fax_state_t *fax_state, uint8_t *buf, size_t len)$/;"	f
spandsp_tx	./fax.c	/^gint spandsp_tx(fax_state_t *fax_state, uint8_t *buf, size_t len)$/;"	f
spath	./kons.cpp	/^const string& spath=$/;"	v
spruef	./kons.cpp	/^uchar servc::spruef(const string& sbez, uchar obfork, const string& parent, const string& sexec, const string& CondPath, const string& After, $/;"	f	class:servc
src_no	./fax.h	/^	gchar src_no[64];$/;"	m	struct:fax_status
stack	./kons.h	/^		vector<string> stack;$/;"	m	struct:find2cl
start	./kons.cpp	/^void servc::start(int obverb\/*=0*\/,int oblog\/*=0*\/)$/;"	f	class:servc
start_time	./faxophone.h	/^	gint64 start_time;$/;"	m	struct:recorder
startbar	./kons.cpp	/^int servc::startbar()$/;"	f	class:servc
startundenable	./kons.cpp	/^int servc::startundenable(int obverb\/*=0*\/,int oblog\/*=0*\/)$/;"	f	class:servc
state	./faxophone.h	/^	enum state state;$/;"	m	struct:capi_connection	typeref:enum:capi_connection::state
state	./faxophone.h	/^enum state {$/;"	g
status	./faxophone.h	/^	void (*status)(struct capi_connection *connection, int error_code);$/;"	m	struct:session_handlers_st
std	./direkt.c	/^using namespace std;$/;"	v
sterg	./kons.h	/^    int sterg;$/;"	m	struct:elem2
still	./configure	/^still() {$/;"	f
stop	./kons.cpp	/^void servc::stop(int obverb\/*=0*\/,int oblog\/*=0*\/,uchar mitpkill\/*=0*\/)$/;"	f	class:servc
stopdis	./kons.cpp	/^void servc::stopdis(int obverb\/*=0*\/,int oblog\/*=0*\/,uchar mitpkill)$/;"	f	class:servc
stopggf	./kons.cpp	/^void servc::stopggf(int obverb\/*=0*\/,int oblog\/*=0*\/,uchar mitpkill\/*=0*\/)$/;"	f	class:servc
stream	./logging.c	/^static GFileOutputStream *stream = NULL;$/;"	v	file:
street	./contact.h	/^	gchar *street;$/;"	m	struct:contact
street	./contact.h	/^	gchar *street;$/;"	m	struct:contact_address
string_to_hex	./kons.cpp	/^std::string string_to_hex(const std::string& input)$/;"	f
stumm	./kons.h	/^		int stumm=0; \/\/ gar keine Bildschirmausgabe$/;"	m	struct:hcl
success	./direkt.c	/^static gboolean success = FALSE;$/;"	v	file:
suche	./kons.cpp	/^const string *const absch::suche(const char* const sname)$/;"	f	class:absch
suche	./kons.cpp	/^const string *const absch::suche(const string& sname)$/;"	f	class:absch
sudoersdt	./kons.h	/^		static const string passwddt, groupdt, sudoersdt;$/;"	m	struct:hcl
support1	./faxophone.h	/^	uint32_t support1;$/;"	m	struct:capi_profile
support2	./faxophone.h	/^	uint32_t support2;$/;"	m	struct:capi_profile
support3	./faxophone.h	/^	uint32_t support3;$/;"	m	struct:capi_profile
sus	./kons.h	/^enum lsysen:uchar {usys,sus,deb,fed};$/;"	e	enum:lsysen
svec	./kons.h	/^struct svec: vector<std::string>$/;"	s
svf0	./kons.h	/^		int svf0=-1; \/\/ Einstellung nach erstem Ablauf von obsvfeh$/;"	m	struct:servc
svfeh	./kons.h	/^    int svfeh=-1; \/\/ Ausgangseinstellung$/;"	m	struct:servc
sys	./kons.h	/^    lsysen sys=usys; $/;"	m	struct:lsyscl
systemd	./kons.h	/^		string systemd; \/\/ Dienst-Datei$/;"	m	struct:servc
systemrueck	./kons.cpp	/^int systemrueck(const string& cmd, int obverb\/*=0*\/, int oblog\/*=0*\/, vector<string> *rueck\/*=0*\/, const uchar obsudc\/*=0*\/,$/;"	f
t0	./kons.h	/^	time_t t0=0, t1;$/;"	m	struct:perfcl
t1	./kons.h	/^	time_t t0=0, t1;$/;"	m	struct:perfcl
tagesaufr	./kons.h	/^		ulong tagesaufr=0; \/\/ Zahl der bisherigen Programmaufrufe heute$/;"	m	struct:hcl
target	./faxophone.h	/^	char *target;$/;"	m	struct:capi_connection
tende	./kons.h	/^    double tstart, tende;$/;"	m	struct:hcl
tflag	./kons.h	/^    int tflag;$/;"	m	struct:elem3
thr_strftime	./kons.cpp	/^size_t thr_strftime(const struct tm* const timeptr,string *const ziel,const char* const format\/*="%d.%m.%Y %H.%M.%S"*\/)$/;"	f
tiff_file	./fax.h	/^	gchar tiff_file[256];$/;"	m	struct:fax_status
timemutex	./kons.cpp	/^pthread_mutex_t printf_mutex, getmutex, timemutex;$/;"	v
tmloc	./kons.h	/^		tm tmloc;$/;"	m	struct:ztacl
tmmoelen	./kons.h	/^		unsigned tmmoelen;$/;"	m	struct:hcl
tmpcron	./kons.h	/^		string tmpcron; \/\/ fuer crontab$/;"	m	struct:hcl
touch	./kons.cpp	/^int touch(const string& pfad,int obverb\/*=0*\/,int oblog\/*=0*\/)$/;"	f
tr64cl	./tr64.cpp	/^tr64cl::tr64cl(std::string fbusr,std::string fbpwd):$/;"	f	class:tr64cl
tr64cl	./tr64.h	/^class tr64cl {$/;"	c
trg_no	./fax.h	/^	gchar trg_no[64];$/;"	m	struct:fax_status
tstart	./kons.h	/^    double tstart, tende;$/;"	m	struct:hcl
tsvec	./kons.h	/^struct tsvec: vector<T>$/;"	s
tucronschreib	./kons.cpp	/^void hcl::tucronschreib(const string& zsauf,const uchar cronzuplanen,const string& cbef)$/;"	f	class:hcl
tuerkis	./kons.cpp	/^      *const tuerkis="\\e[0;36m", *const htuerkis="\\e[1;36m", *const hgrau="\\e[0;37m", *const weiss="\\e[1;37m", *const umgek="\\e[7m";$/;"	v
tuerkis	./kons.cpp	/^const char *const drot="", *const rot="", *const schwarz="", *const blau="", *const gelb="", *const tuerkis="", *const hgrau="";$/;"	v
tuloeschen	./kons.cpp	/^int tuloeschen(const string& zuloe,const string& cuser\/*=string()*\/, int obverb\/*=0*\/, int oblog\/*=0*\/,stringstream *ausgp\/*=0*\/)$/;"	f
turueckfrage	./kons.cpp	/^void hcl::turueckfrage(shared_ptr<optcl>& omit)$/;"	f	class:hcl
tusetzstr	./kons.cpp	/^int wpgcl::tusetzstr(const char* const neuw,uchar *const tuschreibp,const uchar ausDatei\/*=0*\/,const uchar keineprio\/*=0*\/)$/;"	f	class:wpgcl
typ	./kons.h	/^		string typ;$/;"	m	struct:find2cl
typbit	./kons.h	/^    int typbit;$/;"	m	struct:find3cl
typbitp	./kons.cpp	/^int *find3cl::typbitp;$/;"	m	class:find3cl	file:
typbitp	./kons.h	/^    static int *typbitp;$/;"	m	struct:find3cl
type	./audio.h	/^	gchar type;$/;"	m	struct:audio_device
type	./call.h	/^	gint type;$/;"	m	struct:call
type	./connection.h	/^	guchar type;$/;"	m	struct:connection
type	./contact.h	/^	gint type;$/;"	m	struct:contact_address
type	./faxophone.h	/^	enum session_type type;$/;"	m	struct:capi_connection	typeref:enum:capi_connection::session_type
uchar	./kons.h	/^typedef unsigned char uchar; \/\/ 1 Byte$/;"	t
udpr	./kons.h	/^ string udpr;   \/\/ Befehl zum direkten Deinstallieren$/;"	m	struct:linst_cl
uebers	./kons.h	/^		stringstream uebers; \/\/ Ueberschrift fuer Verarbeitungslauf$/;"	m	struct:hcl
uebersichtlich	./kons.cpp	5758;"	d	file:
uint16_t	./faxophone.h	/^typedef unsigned short uint16_t;$/;"	t
uint32_t	./faxophone.h	/^typedef unsigned int uint32_t;$/;"	t
ull	./kons.h	/^typedef unsigned long long ull;$/;"	t
umgek	./kons.cpp	/^      *const tuerkis="\\e[0;36m", *const htuerkis="\\e[1;36m", *const hgrau="\\e[0;37m", *const weiss="\\e[1;37m", *const umgek="\\e[7m";$/;"	v
unbek	./kons.h	/^enum distroenum{unbek=-1,Mint,Ubuntu,Debian,Suse,Fedora,Fedoraalt,Mageia,Manjaro};$/;"	e	enum:distroenum
untersuser	./kons.cpp	/^int untersuser(const string& uname,__uid_t *uidp\/*=0*\/, __gid_t *gidp\/*=0*\/,vector<gid_t> *gids\/*=0*\/,struct passwd* ustr\/*=0*\/)$/;"	f
upd	./kons.h	/^ string upd;    \/\/ Befehl zum Systemupdate$/;"	m	struct:linst_cl
upr	./kons.h	/^ string upr;   \/\/ Befehl zum Deinstallieren ueber das Installationssystem$/;"	m	struct:linst_cl
url	./tr64.h	/^		string url;$/;"	m	class:tr64cl
urlvs	./tr64.h	/^		string urlvs;$/;"	m	class:tr64cl
urp	./kons.h	/^enum instprog {keinp,zypper,apt,dnf,yum,urp,pac};$/;"	e	enum:instprog
use_buffers	./faxophone.h	/^	gboolean use_buffers;$/;"	m	struct:capi_connection
user_data	./net_monitor.h	/^	gpointer user_data;$/;"	m	struct:net_event
username	./network.h	/^	gchar *username;$/;"	m	struct:auth_data
usr	./direkt.h	/^    const std::string usr;$/;"	m	class:fbcl
usr	./fbfax.h	/^		string usr;$/;"	m	class:hhcl
usr_lib64_vz	./kons.h	/^		string usr_lib64_vz;$/;"	m	struct:lsyscl
usys	./kons.h	/^enum lsysen:uchar {usys,sus,deb,fed};$/;"	e	enum:lsysen
uypr	./kons.h	/^ string uypr;   \/\/ Befehl zum Deinstallieren ueber das Installationssystem ohne Rueckfrage$/;"	m	struct:linst_cl
vagenau	./kons.cpp	1393;"	d	file:
vector_incl	./kons.h	32;"	d
verarbeit	./kons.cpp	/^int find3cl::verarbeit(const char *fpath, const struct stat *sb, int tflag, struct FTW *ftwbuf)$/;"	f	class:find3cl
verarbeitkonf	./kons.cpp	/^void hcl::verarbeitkonf()$/;"	f	class:hcl
versnr	./fbfax.cpp	/^const double& versnr= \/\/α$/;"	v
verszuzahl	./kons.cpp	/^double verszuzahl(const string& vers)$/;"	f
verzeichnisse	./fbfax.cpp	/^void hhcl::verzeichnisse()$/;"	f	class:hhcl
verzneu	./kons.h	/^		int eingefuegt, verzneu;$/;"	m	struct:find2cl
viadd	./kons.cpp	/^void viadd(string* const cmdp,string* const zeigp, const string& datei,const uchar ro\/*=0*\/,const uchar hinten\/*=0*\/, const uchar unten\/*=0*\/)$/;"	f
violett	./kons.cpp	/^			*const dblau="\\e[0;34;1;47m", *const blau="\\e[1;34m", *const violett="\\e[0;35m", *const hviolett="\\e[1;35m",$/;"	v
virtMusterVorgb	./fbfax.cpp	/^void hhcl::virtMusterVorgb()$/;"	f	class:hhcl
virtMusterVorgb	./kons.cpp	/^void hcl::virtMusterVorgb()$/;"	f	class:hcl
virtVorgbAllg	./fbfax.cpp	/^void hhcl::virtVorgbAllg()$/;"	f	class:hhcl
virtVorgbAllg	./kons.cpp	/^void hcl::virtVorgbAllg()$/;"	f	class:hcl
virtautokonfschreib	./fbfax.cpp	/^void hhcl::virtautokonfschreib()$/;"	f	class:hhcl
virtautokonfschreib	./kons.cpp	/^void hcl::virtautokonfschreib()$/;"	f	class:hcl
virteinzutragen	./kons.cpp	/^const uchar optcl::virteinzutragen(\/*schAcl<optcl>**\/void* schlp,int obverb)$/;"	f	class:optcl
virteinzutragen	./kons.cpp	/^const uchar wpgcl::virteinzutragen(void *schlp,int obverb)$/;"	f	class:wpgcl
virtfrisch	./kons.cpp	/^void WPcl::virtfrisch()$/;"	f	class:WPcl
virtfrisch	./kons.cpp	/^void optcl::virtfrisch()$/;"	f	class:optcl
virtfrisch	./kons.cpp	/^void wpgcl::virtfrisch()$/;"	f	class:wpgcl
virtholstr	./kons.cpp	/^string WPcl::virtholstr() const$/;"	f	class:WPcl
virtholstr	./kons.cpp	/^string wpgcl::virtholstr() const$/;"	f	class:wpgcl
virtinitopt	./fbfax.cpp	/^void hhcl::virtinitopt()$/;"	f	class:hhcl
virtinitopt	./kons.cpp	/^void hcl::virtinitopt()$/;"	f	class:hcl
virtlgnzuw	./kons.cpp	/^void hcl::virtlgnzuw()$/;"	f	class:hcl
virtlieskonfein	./fbfax.cpp	/^void hhcl::virtlieskonfein()$/;"	f	class:hhcl
virtlieskonfein	./kons.cpp	/^void hcl::virtlieskonfein()$/;"	f	class:hcl
virtloeschomaps	./kons.cpp	/^void optcl::virtloeschomaps(schAcl<optcl> *schlp)$/;"	f	class:optcl
virtmachbemerk	./kons.cpp	/^const string& optcl::virtmachbemerk(const Sprache lg,const binaer obfarbe\/*=wahr*\/)$/;"	f	class:optcl
virtmachbemerk	./kons.cpp	/^const string& wpgcl::virtmachbemerk(const Sprache lg,const binaer obfarbe\/*=wahr*\/)$/;"	f	class:wpgcl
virtoausgeb	./kons.cpp	/^void WPcl::virtoausgeb() const$/;"	f	class:WPcl
virtoausgeb	./kons.cpp	/^void optcl::virtoausgeb() const$/;"	f	class:optcl
virtoausgeb	./kons.cpp	/^void wpgcl::virtoausgeb() const$/;"	f	class:wpgcl
virtpruefweiteres	./fbfax.cpp	/^void hhcl::virtpruefweiteres()$/;"	f	class:hhcl
virtpruefweiteres	./kons.cpp	/^void hcl::virtpruefweiteres()$/;"	f	class:hcl
virtrueckfrage	./kons.cpp	/^void hcl::virtrueckfrage(shared_ptr<optcl>& omit)$/;"	f	class:hcl
virtschlussanzeige	./fbfax.cpp	/^void hhcl::virtschlussanzeige()$/;"	f	class:hhcl
virtschlussanzeige	./kons.cpp	/^void hcl::virtschlussanzeige()$/;"	f	class:hcl
virttesterg	./fbfax.cpp	/^void hhcl::virttesterg()$/;"	f	class:hhcl
virttusetzbemerkwoher	./kons.cpp	/^void optcl::virttusetzbemerkwoher(const string& ibemerk,const uchar vwoher)$/;"	f	class:optcl
virttusetzbemerkwoher	./kons.cpp	/^void wpgcl::virttusetzbemerkwoher(const string& ibemerk, const uchar vwoher)$/;"	f	class:wpgcl
virtweisomapzu	./kons.cpp	/^void optcl::virtweisomapzu(void *schlp)$/;"	f	class:optcl
virtweisomapzu	./kons.cpp	/^void wpgcl::virtweisomapzu(void *optp)$/;"	f	class:wpgcl
virtzeigueberschrift	./fbfax.cpp	/^void hhcl::virtzeigueberschrift()$/;"	f	class:hhcl
virtzeigueberschrift	./kons.cpp	/^void hcl::virtzeigueberschrift()$/;"	f	class:hcl
virtzeigversion	./fbfax.cpp	/^void hhcl::virtzeigversion(const string& ltiffv\/*=string()*\/)$/;"	f	class:hhcl
virtzeigversion	./kons.cpp	/^void hcl::virtzeigversion(const string& ltiffv\/*=string()*\/)$/;"	f	class:hcl
vischluss	./kons.cpp	/^void hcl::vischluss(string& erg,string& zeig)$/;"	f	class:hcl
vonwo	./kons.h	/^	string vonwo;$/;"	m	struct:perfcl
vorcm	./kons.h	/^		string vorcm; \/\/ Vor-Cron-Minuten$/;"	m	struct:hcl
vtz	./kons.h	23;"	d
vtz	./kons.h	26;"	d
vtzs	./kons.h	24;"	d
vtzs	./kons.h	27;"	d
vwdtp	./direkt.c	/^fstream *vwdtp;$/;"	v
vznp	./kons.h	/^		set<string> *vznp=0; $/;"	m	struct:find2cl
waehle	./direkt.c	/^void fbcl::waehle(string nr)$/;"	f	class:fbcl
wahr	./kons.h	/^enum binaer:uchar {falsch,wahr};$/;"	e	enum:binaer
wait	./kons.cpp	/^inline void wait () $/;"	f
wartaufpids	./kons.cpp	/^int wartaufpids(pidvec *pidtb,const ulong runden\/*=0*\/,const int obverb\/*=0*\/,const int oblog\/*=0*\/,const string& wo\/*=string()*\/,const time_t maxsec\/*0*\/)$/;"	f
weiss	./kons.cpp	/^      *const tuerkis="\\e[0;36m", *const htuerkis="\\e[1;36m", *const hgrau="\\e[0;37m", *const weiss="\\e[1;37m", *const umgek="\\e[7m";$/;"	v
weiszu	./kons.cpp	/^void find2cl::weiszu()$/;"	f	class:find2cl
wele	./kons.h	/^    wele(const string& pfad=nix, const long& maxd=-1):pfad(pfad),maxd(maxd){}$/;"	f	struct:wele
wele	./kons.h	/^struct wele$/;"	s
wert	./kons.h	/^	string wert;$/;"	m	struct:paarcl
wert	./kons.h	/^    string wert;$/;"	m	struct:WPcl
wertp	./kons.h	/^   const string *wertp;$/;"	m	struct:aScl
wpgcl	./kons.cpp	/^wpgcl::wpgcl(const string& pname,const void* pptr,par_t part):pname(pname),pptr(pptr),part(part),eingetragen(0)$/;"	f	class:wpgcl
wpgcl	./kons.h	/^struct wpgcl $/;"	s
write	./audio.h	/^	gsize (*write)(gpointer priv, guchar *buffer, gsize len);$/;"	m	struct:audio
writer	./tr64.cpp	/^static int writer(char *data, size_t size, size_t nmemb, std::string *writerData)$/;"	f	file:
wurz	./kons.h	/^    set<wele> wurz,fertige;$/;"	m	struct:find3cl
wurzp	./kons.cpp	/^set<wele> *find3cl::wurzp;$/;"	m	class:find3cl	file:
wurzp	./kons.h	/^    static set<wele> *wurzp;$/;"	m	struct:find3cl
wvz	./fbfax.h	/^		string wvz; \/\/ Warteverzeichnis$/;"	m	class:hhcl
xargspf	./kons.h	/^ string xargspf; \/\/ Pfad zu xargs$/;"	m	struct:linst_cl
yLog	./kons.cpp	/^int yLog(const short screen,const short file, const bool oberr,const short klobverb, const char *format, ...)$/;"	f
yum	./kons.h	/^enum instprog {keinp,zypper,apt,dnf,yum,urp,pac};$/;"	e	enum:instprog
zahlin	./kons.cpp	/^size_t zahlin(const string *const str, const char* const was) $/;"	f
zcnfA	./kons.h	/^		schAcl<WPcl> zcnfA=schAcl<WPcl>("zcnfA"); \/\/ Zaehlkonfiguration$/;"	m	struct:hcl
zeighilfe	./kons.cpp	/^int hcl::zeighilfe(const stringstream *const erkl)$/;"	f	class:hcl
zeigkonf	./kons.cpp	/^void hcl::zeigkonf()$/;"	f	class:hcl
zeigschoen	./kons.cpp	/^template<typename SCL> void schAcl<SCL>::zeigschoen()$/;"	f	class:schAcl
zeigvers	./kons.h	/^    uchar zeigvers=0;  \/\/ Version anzeigen$/;"	m	struct:hcl
zgvz	./fbfax.h	/^    uchar zgvz=0; \/\/ zeig Verzeichnisse$/;"	m	class:hhcl
ziehraus	./kons.cpp	/^void linst_cl::ziehraus(svec srueck, string *ustringp)$/;"	f	class:linst_cl
zip	./contact.h	/^	gchar *zip;$/;"	m	struct:contact
zip	./contact.h	/^	gchar *zip;$/;"	m	struct:contact_address
zn	./kons.h	/^	svec zn;$/;"	m	struct:confdcl
zp0	./kons.h	/^	clock_t zp0, zp1, zp1alt;$/;"	m	struct:perfcl
zp1	./kons.h	/^	clock_t zp0, zp1, zp1alt;$/;"	m	struct:perfcl
zp1alt	./kons.h	/^	clock_t zp0, zp1, zp1alt;$/;"	m	struct:perfcl
zt	./kons.h	/^		const time_t zt;$/;"	m	struct:ztacl
ztacl	./kons.cpp	/^ztacl::ztacl(const time_t &pzt,const char* const pfmt\/*="%d.%m.%Y %H.%M.%S"*\/):zt(pzt),fmt(pfmt)$/;"	f	class:ztacl
ztacl	./kons.cpp	/^ztacl::ztacl(const tm *const tm,const char* const pfmt\/*="%d.%m.%Y %H.%M.%S %z %Z"*\/):tmloc(*tm),zt(mktime(&tmloc)),fmt(pfmt)$/;"	f	class:ztacl
ztacl	./kons.h	/^struct ztacl $/;"	s
zuloeschen	./kons.h	/^		int zuloeschen=1;$/;"	m	struct:find2cl
zustr	./kons.h	/^inline string zustr(int _Val) $/;"	f
zuvec	./kons.cpp	/^void find2cl::zuvec(svec *zu,uchar anteil\/*=0*\/)$/;"	f	class:find2cl
zuvec	./kons.cpp	/^void find3cl::zuvec(svec *zu,uchar anteil\/*=0*\/)$/;"	f	class:find3cl
zuzahl	./kons.cpp	/^string zuzahl(const string& q)$/;"	f
zypper	./kons.h	/^enum instprog {keinp,zypper,apt,dnf,yum,urp,pac};$/;"	e	enum:instprog
~aocl	./appobject.c	/^aocl::~aocl()$/;"	f	class:aocl
~fbcl	./direkt.c	/^fbcl::~fbcl()$/;"	f	class:fbcl
~find2cl	./kons.cpp	/^find2cl::~find2cl()$/;"	f	class:find2cl
~hcl	./kons.cpp	/^hcl::~hcl()$/;"	f	class:hcl
~hhcl	./fbfax.cpp	/^hhcl::~hhcl() $/;"	f	class:hhcl
~ic_cl	./kons.cpp	/^ic_cl::~ic_cl() { $/;"	f	class:ic_cl
~optcl	./kons.cpp	/^optcl::~optcl()$/;"	f	class:optcl
~rmcl	./routermanager.c	/^rmcl::~rmcl()$/;"	f	class:rmcl
~schAcl	./kons.cpp	/^template<typename SCL> schAcl<SCL>::~schAcl()$/;"	f	class:schAcl
